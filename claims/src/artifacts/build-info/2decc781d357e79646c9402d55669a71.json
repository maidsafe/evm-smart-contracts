{
	"id": "2decc781d357e79646c9402d55669a71",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/Claims.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IClaims} from \"./IClaims.sol\";\nimport {IAutonomiNFT} from \"./IAutonomiNFT.sol\";\n\ncontract Claims is IClaims, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    error ZeroAddressNotAllowed();\n    error ZeroAmountNotAllowed();\n\n    // Tue Feb 11 2025 14:00:00 GMT+0000 - when ANT trading went live\n    uint256 public constant VESTING_START_TIMESTAMP = 1739282400;\n\n    uint256 public constant VESTING_PERIOD_1 = 90 days; // 3 months\n    uint256 public constant VESTING_PERIOD_2 = 180 days; // 6 months\n\n    mapping(uint256 => uint256) public totalAntClaimedForTokenId;\n\n    IERC20 public immutable ANT_TOKEN;\n    IAutonomiNFT public immutable AUTONOMI_NFT;\n\n    constructor(IERC20 antToken, IAutonomiNFT autonomiNFT) {\n        if (address(antToken) == address(0) || address(autonomiNFT) == address(0)) {\n            revert ZeroAddressNotAllowed();\n        }\n\n        ANT_TOKEN = antToken;\n        AUTONOMI_NFT = autonomiNFT;\n    }\n\n    /**\n     * @dev The total claimable amount is unlocked during a period of 6 months,\n     * with the 50% unlocked after 3 months, and the rest after 6 months.\n     * Autonomi NFT holders can claim any amount less than or equal to the unlocked amount, minus the amount they already claimed.\n     *\n     * The amount claimed should never be more than the total allocation to that NFT.\n     * NFT holders should be able to claim all their allocated ANT tokens after the 6 month vesting periods have passed.\n     */\n    function claim(uint256 tokenId, uint256 amount) external nonReentrant {\n        if (AUTONOMI_NFT.ownerOf(tokenId) != msg.sender) {\n            revert Unauthorized();\n        }\n\n        if (amount == 0) {\n            revert ZeroAmountNotAllowed();\n        }\n\n        uint256 claimableAmount = _claimable(tokenId);\n\n        // Check that it input amount is lesser or equal than claimable Amount\n        if (amount > claimableAmount) {\n            revert TryingToClaimTooMuch();\n        }\n\n        // add the amount to the total Ant claimed for token ID\n        totalAntClaimedForTokenId[tokenId] += amount;\n\n        // transfer the tokens\n        ANT_TOKEN.safeTransfer(msg.sender, amount);\n\n        emit TokensClaimed(tokenId, amount);\n    }\n\n    function getClaimable(uint256 tokenId) external view returns (uint256) {\n        return _claimable(tokenId);\n    }\n\n    function _claimable(uint256 tokenId) private view returns (uint256) {\n        uint256 totalAllocation = AUTONOMI_NFT.tokenIdToAntAllocation(tokenId);\n\n        uint256 alreadyClaimed = totalAntClaimedForTokenId[tokenId];\n\n        uint256 elapsedTime = block.timestamp - VESTING_START_TIMESTAMP;\n        uint256 claimableAmount = 0;\n\n        if (elapsedTime >= VESTING_PERIOD_2) {\n            claimableAmount = totalAllocation - alreadyClaimed;\n        } else if (elapsedTime >= VESTING_PERIOD_1) {\n            claimableAmount = (totalAllocation * 50) / 100 - alreadyClaimed;\n        }\n\n        return claimableAmount;\n    }\n}\n"
			},
			"src/IAutonomiNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IAutonomiNFT is IERC721 {\n    function tokenIdToAntAllocation(uint256 tokenId) external view returns (uint256);\n}\n"
			},
			"src/IClaims.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/* \n- the goal of this contract is to hold ANT tokens, and then unlock them periodically to NFT holders\n- the total allocation is specified in the NFT so the contract will have to read that:\nfunction tokenIdToAntAllocation(uint256) external view returns (uint256)\n\nthen the claimable amounts are as follows:\n50% of claimable amount unlocked after 3 months\nnext 50% of claimable amount unlocked after 6 months\n */\ninterface IClaims {\n    error Unauthorized();\n    error TryingToClaimTooMuch();\n\n    event TokensClaimed(uint256 indexed tokenId, uint256 indexed amount);\n\n    function claim(uint256 tokenId, uint256 amount) external;\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"forge-std/=lib/forge-std/",
				"@openzeppelin/=lib/openzeppelin-contracts/"
			]
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":698:9390  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":698:9390  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220a9730632e582020cbc628090e774153b80b017d0c7de2fb3c60bca767c814f0f64736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220a9730632e582020cbc628090e774153b80b017d0c7de2fb3c60bca767c814f0f64736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 PUSH20 0x632E582020CBC628090E774153B80B017D0C7DE 0x2F 0xB3 0xC6 SIGNEXTEND 0xCA PUSH23 0x7C814F0F64736F6C634300081C00330000000000000000 ",
							"sourceMap": "698:8692:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;698:8692:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220a9730632e582020cbc628090e774153b80b017d0c7de2fb3c60bca767c814f0f64736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 PUSH20 0x632E582020CBC628090E774153B80B017D0C7DE 0x2F 0xB3 0xC6 SIGNEXTEND 0xCA PUSH23 0x7C814F0F64736F6C634300081C00330000000000000000 ",
							"sourceMap": "698:8692:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 698,
									"end": 9390,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a9730632e582020cbc628090e774153b80b017d0c7de2fb3c60bca767c814f0f64736f6c634300081c0033",
									".code": [
										{
											"begin": 698,
											"end": 9390,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 9390,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
								"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"src/Claims.sol",
								"src/IAutonomiNFT.sol",
								"src/IClaims.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329\",\"dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC-721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC-721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11\",\"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 704,
								"contract": "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Claims.sol": {
				"Claims": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "antToken",
									"type": "address"
								},
								{
									"internalType": "contract IAutonomiNFT",
									"name": "autonomiNFT",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TryingToClaimTooMuch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Unauthorized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddressNotAllowed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAmountNotAllowed",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokensClaimed",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "ANT_TOKEN",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "AUTONOMI_NFT",
							"outputs": [
								{
									"internalType": "contract IAutonomiNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "VESTING_PERIOD_1",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "VESTING_PERIOD_2",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "VESTING_START_TIMESTAMP",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getClaimable",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "totalAntClaimedForTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"claim(uint256,uint256)": {
								"details": "The total claimable amount is unlocked during a period of 6 months, with the 50% unlocked after 3 months, and the rest after 6 months. Autonomi NFT holders can claim any amount less than or equal to the unlocked amount, minus the amount they already claimed. The amount claimed should never be more than the total allocation to that NFT. NFT holders should be able to claim all their allocated ANT tokens after the 6 month vesting periods have passed."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Claims.sol\":329:3191  contract Claims is IClaims, ReentrancyGuard {... */\n  mstore(0x40, 0xc0)\n    /* \"src/Claims.sol\":912:1180  constructor(IERC20 antToken, IAutonomiNFT autonomiNFT) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":1857:1858  1 */\n  0x01\n    /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2061:2068  _status */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2061:2082  _status = NOT_ENTERED */\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/Claims.sol\":981:1012  address(antToken) == address(0) */\n  dup3\n  and\n  iszero\n  dup1\n    /* \"src/Claims.sol\":981:1050  address(antToken) == address(0) || address(autonomiNFT) == address(0) */\n  tag_8\n  jumpi\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/Claims.sol\":1016:1050  address(autonomiNFT) == address(0) */\n  dup2\n  and\n  iszero\n    /* \"src/Claims.sol\":981:1050  address(antToken) == address(0) || address(autonomiNFT) == address(0) */\ntag_8:\n    /* \"src/Claims.sol\":977:1107  if (address(antToken) == address(0) || address(autonomiNFT) == address(0)) {... */\n  iszero\n  tag_9\n  jumpi\n    /* \"src/Claims.sol\":1073:1096  ZeroAddressNotAllowed() */\n  mload(0x40)\n  shl(0xe1, 0x42bcdf7f)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"src/Claims.sol\":977:1107  if (address(antToken) == address(0) || address(autonomiNFT) == address(0)) {... */\ntag_9:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/Claims.sol\":1117:1137  ANT_TOKEN = antToken */\n  swap2\n  dup3\n  and\n  0x80\n  mstore\n    /* \"src/Claims.sol\":1147:1173  AUTONOMI_NFT = autonomiNFT */\n  and\n  0xa0\n  mstore\n    /* \"src/Claims.sol\":329:3191  contract Claims is IClaims, ReentrancyGuard {... */\n  jump(tag_12)\n    /* \"#utility.yul\":14:153   */\ntag_11:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":97:128   */\n  dup2\n  and\n    /* \"#utility.yul\":87:129   */\n  dup2\n  eq\n    /* \"#utility.yul\":77:147   */\n  tag_14\n  jumpi\n    /* \"#utility.yul\":143:144   */\n  0x00\n    /* \"#utility.yul\":140:141   */\n  0x00\n    /* \"#utility.yul\":133:145   */\n  revert\n    /* \"#utility.yul\":77:147   */\ntag_14:\n    /* \"#utility.yul\":14:153   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":158:594   */\ntag_3:\n    /* \"#utility.yul\":272:278   */\n  0x00\n    /* \"#utility.yul\":280:286   */\n  0x00\n    /* \"#utility.yul\":333:335   */\n  0x40\n    /* \"#utility.yul\":321:330   */\n  dup4\n    /* \"#utility.yul\":312:319   */\n  dup6\n    /* \"#utility.yul\":308:331   */\n  sub\n    /* \"#utility.yul\":304:336   */\n  slt\n    /* \"#utility.yul\":301:353   */\n  iszero\n  tag_16\n  jumpi\n    /* \"#utility.yul\":349:350   */\n  0x00\n    /* \"#utility.yul\":346:347   */\n  0x00\n    /* \"#utility.yul\":339:351   */\n  revert\n    /* \"#utility.yul\":301:353   */\ntag_16:\n    /* \"#utility.yul\":381:390   */\n  dup3\n    /* \"#utility.yul\":375:391   */\n  mload\n    /* \"#utility.yul\":400:439   */\n  tag_17\n    /* \"#utility.yul\":433:438   */\n  dup2\n    /* \"#utility.yul\":400:439   */\n  tag_11\n  jump\t// in\ntag_17:\n    /* \"#utility.yul\":508:510   */\n  0x20\n    /* \"#utility.yul\":493:511   */\n  dup5\n  add\n    /* \"#utility.yul\":487:512   */\n  mload\n    /* \"#utility.yul\":458:463   */\n  swap1\n  swap3\n  pop\n    /* \"#utility.yul\":521:562   */\n  tag_18\n    /* \"#utility.yul\":487:512   */\n  dup2\n    /* \"#utility.yul\":521:562   */\n  tag_11\n  jump\t// in\ntag_18:\n    /* \"#utility.yul\":581:588   */\n  dup1\n    /* \"#utility.yul\":571:588   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":158:594   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_12:\n    /* \"src/Claims.sol\":329:3191  contract Claims is IClaims, ReentrancyGuard {... */\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x91bb576fe1119b95673556c97f460f2730aaf5e50b5a2b3c73c380bf4786ebe1\")\n  0x00\n  assignImmutable(\"0x7d2aca65cd8181aea74105e2b470fac116fbd6f587d1085ea1412760bb2ab33a\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/Claims.sol\":329:3191  contract Claims is IClaims, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7f384acf\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x7f384acf\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9c7e4a66\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xba175dfa\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xc3490263\n      eq\n      tag_10\n      jumpi\n      revert(0x00, 0x00)\n    tag_11:\n      dup1\n      0x02db104b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x170c62dc\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x317e6d23\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4e301810\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"src/Claims.sol\":824:857  IERC20 public immutable ANT_TOKEN */\n    tag_3:\n      tag_12\n      immutable(\"0x7d2aca65cd8181aea74105e2b470fac116fbd6f587d1085ea1412760bb2ab33a\")\n      dup2\n      jump\n    tag_12:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":192:224   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":174:225   */\n      dup2\n      mstore\n        /* \"#utility.yul\":162:164   */\n      0x20\n        /* \"#utility.yul\":147:165   */\n      add\n        /* \"src/Claims.sol\":824:857  IERC20 public immutable ANT_TOKEN */\n    tag_14:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/Claims.sol\":757:817  mapping(uint256 => uint256) public totalAntClaimedForTokenId */\n    tag_4:\n      tag_16\n      tag_17\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_17:\n      mstore(0x20, 0x01)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n    tag_16:\n      mload(0x40)\n        /* \"#utility.yul\":613:638   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":601:603   */\n      0x20\n        /* \"#utility.yul\":586:604   */\n      add\n        /* \"src/Claims.sol\":757:817  mapping(uint256 => uint256) public totalAntClaimedForTokenId */\n      tag_14\n        /* \"#utility.yul\":467:644   */\n      jump\n        /* \"src/Claims.sol\":863:905  IAutonomiNFT public immutable AUTONOMI_NFT */\n    tag_5:\n      tag_12\n      immutable(\"0x91bb576fe1119b95673556c97f460f2730aaf5e50b5a2b3c73c380bf4786ebe1\")\n      dup2\n      jump\n        /* \"src/Claims.sol\":619:669  uint256 public constant VESTING_PERIOD_1 = 90 days */\n    tag_6:\n      tag_16\n        /* \"src/Claims.sol\":662:669  90 days */\n      0x76a700\n        /* \"src/Claims.sol\":619:669  uint256 public constant VESTING_PERIOD_1 = 90 days */\n      dup2\n      jump\n        /* \"src/Claims.sol\":687:738  uint256 public constant VESTING_PERIOD_2 = 180 days */\n    tag_7:\n      tag_16\n        /* \"src/Claims.sol\":730:738  180 days */\n      0xed4e00\n        /* \"src/Claims.sol\":687:738  uint256 public constant VESTING_PERIOD_2 = 180 days */\n      dup2\n      jump\n        /* \"src/Claims.sol\":2447:2561  function getClaimable(uint256 tokenId) external view returns (uint256) {... */\n    tag_8:\n      tag_16\n      tag_33\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_33:\n      tag_34\n      jump\t// in\n        /* \"src/Claims.sol\":552:612  uint256 public constant VESTING_START_TIMESTAMP = 1739282400 */\n    tag_9:\n      tag_16\n        /* \"src/Claims.sol\":602:612  1739282400 */\n      0x67ab57e0\n        /* \"src/Claims.sol\":552:612  uint256 public constant VESTING_START_TIMESTAMP = 1739282400 */\n      dup2\n      jump\n        /* \"src/Claims.sol\":1701:2441  function claim(uint256 tokenId, uint256 amount) external nonReentrant {... */\n    tag_10:\n      tag_39\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n    tag_39:\n      stop\n        /* \"src/Claims.sol\":2447:2561  function getClaimable(uint256 tokenId) external view returns (uint256) {... */\n    tag_34:\n        /* \"src/Claims.sol\":2509:2516  uint256 */\n      0x00\n        /* \"src/Claims.sol\":2535:2554  _claimable(tokenId) */\n      tag_44\n        /* \"src/Claims.sol\":2546:2553  tokenId */\n      dup3\n        /* \"src/Claims.sol\":2535:2545  _claimable */\n      tag_45\n        /* \"src/Claims.sol\":2535:2554  _claimable(tokenId) */\n      jump\t// in\n    tag_44:\n        /* \"src/Claims.sol\":2528:2554  return _claimable(tokenId) */\n      swap3\n        /* \"src/Claims.sol\":2447:2561  function getClaimable(uint256 tokenId) external view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"src/Claims.sol\":1701:2441  function claim(uint256 tokenId, uint256 amount) external nonReentrant {... */\n    tag_42:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2500:2521  _nonReentrantBefore() */\n      tag_47\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2500:2519  _nonReentrantBefore */\n      tag_48\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2500:2521  _nonReentrantBefore() */\n      jump\t// in\n    tag_47:\n        /* \"src/Claims.sol\":1785:1814  AUTONOMI_NFT.ownerOf(tokenId) */\n      mload(0x40)\n      shl(0xe1, 0x31a9108f)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":613:638   */\n      dup4\n      swap1\n      mstore\n        /* \"src/Claims.sol\":1818:1828  msg.sender */\n      caller\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Claims.sol\":1785:1797  AUTONOMI_NFT */\n      immutable(\"0x91bb576fe1119b95673556c97f460f2730aaf5e50b5a2b3c73c380bf4786ebe1\")\n        /* \"src/Claims.sol\":1785:1805  AUTONOMI_NFT.ownerOf */\n      and\n      swap1\n      0x6352211e\n      swap1\n        /* \"#utility.yul\":586:604   */\n      0x24\n      add\n        /* \"src/Claims.sol\":1785:1814  AUTONOMI_NFT.ownerOf(tokenId) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Claims.sol\":1785:1828  AUTONOMI_NFT.ownerOf(tokenId) != msg.sender */\n      and\n      eq\n        /* \"src/Claims.sol\":1781:1876  if (AUTONOMI_NFT.ownerOf(tokenId) != msg.sender) {... */\n      tag_55\n      jumpi\n        /* \"src/Claims.sol\":1851:1865  Unauthorized() */\n      mload(0x40)\n      shl(0xe8, 0x82b429)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Claims.sol\":1781:1876  if (AUTONOMI_NFT.ownerOf(tokenId) != msg.sender) {... */\n    tag_55:\n        /* \"src/Claims.sol\":1890:1896  amount */\n      dup1\n        /* \"src/Claims.sol\":1900:1901  0 */\n      0x00\n        /* \"src/Claims.sol\":1890:1901  amount == 0 */\n      sub\n        /* \"src/Claims.sol\":1886:1957  if (amount == 0) {... */\n      tag_56\n      jumpi\n        /* \"src/Claims.sol\":1924:1946  ZeroAmountNotAllowed() */\n      mload(0x40)\n      shl(0xe1, 0x07a1cab5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Claims.sol\":1886:1957  if (amount == 0) {... */\n    tag_56:\n        /* \"src/Claims.sol\":1967:1990  uint256 claimableAmount */\n      0x00\n        /* \"src/Claims.sol\":1993:2012  _claimable(tokenId) */\n      tag_57\n        /* \"src/Claims.sol\":2004:2011  tokenId */\n      dup4\n        /* \"src/Claims.sol\":1993:2003  _claimable */\n      tag_45\n        /* \"src/Claims.sol\":1993:2012  _claimable(tokenId) */\n      jump\t// in\n    tag_57:\n        /* \"src/Claims.sol\":1967:2012  uint256 claimableAmount = _claimable(tokenId) */\n      swap1\n      pop\n        /* \"src/Claims.sol\":2115:2130  claimableAmount */\n      dup1\n        /* \"src/Claims.sol\":2106:2112  amount */\n      dup3\n        /* \"src/Claims.sol\":2106:2130  amount > claimableAmount */\n      gt\n        /* \"src/Claims.sol\":2102:2186  if (amount > claimableAmount) {... */\n      iszero\n      tag_58\n      jumpi\n        /* \"src/Claims.sol\":2153:2175  TryingToClaimTooMuch() */\n      mload(0x40)\n      shl(0xe0, 0xd89f341b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Claims.sol\":2102:2186  if (amount > claimableAmount) {... */\n    tag_58:\n        /* \"src/Claims.sol\":2260:2294  totalAntClaimedForTokenId[tokenId] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"src/Claims.sol\":2260:2285  totalAntClaimedForTokenId */\n      0x01\n        /* \"src/Claims.sol\":2260:2294  totalAntClaimedForTokenId[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"src/Claims.sol\":2260:2304  totalAntClaimedForTokenId[tokenId] += amount */\n      dup1\n      sload\n        /* \"src/Claims.sol\":2298:2304  amount */\n      dup5\n      swap3\n        /* \"src/Claims.sol\":2260:2294  totalAntClaimedForTokenId[tokenId] */\n      swap1\n        /* \"src/Claims.sol\":2260:2304  totalAntClaimedForTokenId[tokenId] += amount */\n      tag_59\n      swap1\n        /* \"src/Claims.sol\":2298:2304  amount */\n      dup5\n      swap1\n        /* \"src/Claims.sol\":2260:2304  totalAntClaimedForTokenId[tokenId] += amount */\n      tag_60\n      jump\t// in\n    tag_59:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"src/Claims.sol\":2346:2388  ANT_TOKEN.safeTransfer(msg.sender, amount) */\n      tag_61\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Claims.sol\":2346:2355  ANT_TOKEN */\n      immutable(\"0x7d2aca65cd8181aea74105e2b470fac116fbd6f587d1085ea1412760bb2ab33a\")\n        /* \"src/Claims.sol\":2346:2368  ANT_TOKEN.safeTransfer */\n      and\n        /* \"src/Claims.sol\":2369:2379  msg.sender */\n      caller\n        /* \"src/Claims.sol\":2381:2387  amount */\n      dup5\n        /* \"src/Claims.sol\":2346:2368  ANT_TOKEN.safeTransfer */\n      tag_62\n        /* \"src/Claims.sol\":2346:2388  ANT_TOKEN.safeTransfer(msg.sender, amount) */\n      jump\t// in\n    tag_61:\n        /* \"src/Claims.sol\":2404:2434  TokensClaimed(tokenId, amount) */\n      mload(0x40)\n        /* \"src/Claims.sol\":2427:2433  amount */\n      dup3\n      swap1\n        /* \"src/Claims.sol\":2418:2425  tokenId */\n      dup5\n      swap1\n        /* \"src/Claims.sol\":2404:2434  TokensClaimed(tokenId, amount) */\n      0xbde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a\n      swap1\n      0x00\n      swap1\n      log3\n        /* \"src/Claims.sol\":1771:2441  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2542:2562  _nonReentrantAfter() */\n      tag_63\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":1857:1858  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":3068:3075  _status */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":3068:3089  _status = NOT_ENTERED */\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2888:3096  function _nonReentrantAfter() private {... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2542:2562  _nonReentrantAfter() */\n    tag_63:\n        /* \"src/Claims.sol\":1701:2441  function claim(uint256 tokenId, uint256 amount) external nonReentrant {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/Claims.sol\":2567:3189  function _claimable(uint256 tokenId) private view returns (uint256) {... */\n    tag_45:\n        /* \"src/Claims.sol\":2671:2715  AUTONOMI_NFT.tokenIdToAntAllocation(tokenId) */\n      mload(0x40)\n      shl(0xe0, 0xfd70d177)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":613:638   */\n      dup3\n      swap1\n      mstore\n        /* \"src/Claims.sol\":2626:2633  uint256 */\n      0x00\n      swap1\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Claims.sol\":2671:2683  AUTONOMI_NFT */\n      immutable(\"0x91bb576fe1119b95673556c97f460f2730aaf5e50b5a2b3c73c380bf4786ebe1\")\n        /* \"src/Claims.sol\":2671:2706  AUTONOMI_NFT.tokenIdToAntAllocation */\n      and\n      swap1\n      0xfd70d177\n      swap1\n        /* \"#utility.yul\":586:604   */\n      0x24\n      add\n        /* \"src/Claims.sol\":2671:2715  AUTONOMI_NFT.tokenIdToAntAllocation(tokenId) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_68\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_68:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n        /* \"src/Claims.sol\":2726:2748  uint256 alreadyClaimed */\n      0x00\n        /* \"src/Claims.sol\":2751:2785  totalAntClaimedForTokenId[tokenId] */\n      dup5\n      dup2\n      mstore\n        /* \"src/Claims.sol\":2751:2776  totalAntClaimedForTokenId */\n      0x01\n        /* \"src/Claims.sol\":2751:2785  totalAntClaimedForTokenId[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"src/Claims.sol\":2645:2715  uint256 totalAllocation = AUTONOMI_NFT.tokenIdToAntAllocation(tokenId) */\n      swap2\n      swap3\n      pop\n        /* \"src/Claims.sol\":2818:2859  block.timestamp - VESTING_START_TIMESTAMP */\n      tag_71\n        /* \"src/Claims.sol\":602:612  1739282400 */\n      0x67ab57e0\n        /* \"src/Claims.sol\":2818:2833  block.timestamp */\n      timestamp\n        /* \"src/Claims.sol\":2818:2859  block.timestamp - VESTING_START_TIMESTAMP */\n      tag_72\n      jump\t// in\n    tag_71:\n        /* \"src/Claims.sol\":2796:2859  uint256 elapsedTime = block.timestamp - VESTING_START_TIMESTAMP */\n      swap1\n      pop\n        /* \"src/Claims.sol\":2869:2892  uint256 claimableAmount */\n      0x00\n        /* \"src/Claims.sol\":730:738  180 days */\n      0xed4e00\n        /* \"src/Claims.sol\":2911:2942  elapsedTime >= VESTING_PERIOD_2 */\n      dup3\n      lt\n        /* \"src/Claims.sol\":2907:3150  if (elapsedTime >= VESTING_PERIOD_2) {... */\n      tag_73\n      jumpi\n        /* \"src/Claims.sol\":2976:3008  totalAllocation - alreadyClaimed */\n      tag_74\n        /* \"src/Claims.sol\":2994:3008  alreadyClaimed */\n      dup4\n        /* \"src/Claims.sol\":2976:2991  totalAllocation */\n      dup6\n        /* \"src/Claims.sol\":2976:3008  totalAllocation - alreadyClaimed */\n      tag_72\n      jump\t// in\n    tag_74:\n        /* \"src/Claims.sol\":2958:3008  claimableAmount = totalAllocation - alreadyClaimed */\n      swap1\n      pop\n        /* \"src/Claims.sol\":2907:3150  if (elapsedTime >= VESTING_PERIOD_2) {... */\n      jump(tag_76)\n    tag_73:\n        /* \"src/Claims.sol\":662:669  90 days */\n      0x76a700\n        /* \"src/Claims.sol\":3029:3040  elapsedTime */\n      dup3\n        /* \"src/Claims.sol\":3029:3060  elapsedTime >= VESTING_PERIOD_1 */\n      lt\n        /* \"src/Claims.sol\":3025:3150  if (elapsedTime >= VESTING_PERIOD_1) {... */\n      tag_76\n      jumpi\n        /* \"src/Claims.sol\":3125:3139  alreadyClaimed */\n      dup3\n        /* \"src/Claims.sol\":3119:3122  100 */\n      0x64\n        /* \"src/Claims.sol\":3095:3115  totalAllocation * 50 */\n      tag_77\n        /* \"src/Claims.sol\":3095:3110  totalAllocation */\n      dup7\n        /* \"src/Claims.sol\":3113:3115  50 */\n      0x32\n        /* \"src/Claims.sol\":3095:3115  totalAllocation * 50 */\n      tag_78\n      jump\t// in\n    tag_77:\n        /* \"src/Claims.sol\":3094:3122  (totalAllocation * 50) / 100 */\n      tag_79\n      swap2\n      swap1\n      tag_80\n      jump\t// in\n    tag_79:\n        /* \"src/Claims.sol\":3094:3139  (totalAllocation * 50) / 100 - alreadyClaimed */\n      tag_81\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_81:\n        /* \"src/Claims.sol\":3076:3139  claimableAmount = (totalAllocation * 50) / 100 - alreadyClaimed */\n      swap1\n      pop\n        /* \"src/Claims.sol\":3025:3150  if (elapsedTime >= VESTING_PERIOD_1) {... */\n    tag_76:\n        /* \"src/Claims.sol\":3167:3182  claimableAmount */\n      swap6\n        /* \"src/Claims.sol\":2567:3189  function _claimable(uint256 tokenId) private view returns (uint256) {... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2575:2882  function _nonReentrantBefore() private {... */\n    tag_48:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2702:2709  _status */\n      sload(0x00)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2702:2720  _status == ENTERED */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n      tag_83\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2743:2773  ReentrancyGuardReentrantCall() */\n      mload(0x40)\n      shl(0xe0, 0x3ee5aeb5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n    tag_83:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2858:2865  _status */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2858:2875  _status = ENTERED */\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":2575:2882  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_62:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2695:2727   */\n      dup5\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2677:2728   */\n      mstore\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2737:2771   */\n      dup5\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":2650:2668   */\n      0x64\n      swap1\n      swap2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      swap1\n      swap2\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0xa9059cbb)\n      or\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1372  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_85\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1321:1326  token */\n      dup5\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1320  _callOptionalReturn */\n      tag_88\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1301:1372  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      jump\t// in\n    tag_85:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7686:8406  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_88:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7766:7784  uint256 returnSize */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7794:7813  uint256 returnValue */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7932:7936  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7929:7930  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7922:7926  data */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7916:7927  mload(data) */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7909:7913  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7903:7907  data */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7899:7914  add(data, 0x20) */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7896:7897  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7889:7894  token */\n      dup9\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7882:7887  gas() */\n      gas\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7877:7937  call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20) */\n      call\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7989:7996  success */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7979:8155  if iszero(success) {... */\n      tag_91\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8033:8037  0x40 */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8027:8038  mload(0x40) */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8078:8094  returndatasize() */\n      returndatasize\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8075:8076  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8070:8073  ptr */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8055:8095  returndatacopy(ptr, 0, returndatasize()) */\n      returndatacopy\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8124:8140  returndatasize() */\n      returndatasize\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8119:8122  ptr */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8112:8141  revert(ptr, returndatasize()) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7979:8155  if iszero(success) {... */\n    tag_91:\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8232:8233  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8226:8234  mload(0) */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8182:8198  returndatasize() */\n      returndatasize\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8258:8273  returnSize == 0 */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8258:8326  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      tag_92\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8310:8321  returnValue */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8325:8326  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8310:8326  returnValue != 1 */\n      eq\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8258:8326  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_93)\n    tag_92:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8276:8302  address(token).code.length */\n      dup5\n      and\n      extcodesize\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8276:8307  address(token).code.length == 0 */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8258:8326  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_93:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8254:8400  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8349:8389  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      shl(0xe0, 0x5274afe7)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":192:224   */\n      dup6\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8349:8389  SafeERC20FailedOperation(address(token)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":174:225   */\n      mstore\n        /* \"#utility.yul\":147:165   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8349:8389  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":8254:8400  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_94:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7756:8406  {... */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":7686:8406  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":236:462   */\n    tag_18:\n        /* \"#utility.yul\":295:301   */\n      0x00\n        /* \"#utility.yul\":348:350   */\n      0x20\n        /* \"#utility.yul\":336:345   */\n      dup3\n        /* \"#utility.yul\":327:334   */\n      dup5\n        /* \"#utility.yul\":323:346   */\n      sub\n        /* \"#utility.yul\":319:351   */\n      slt\n        /* \"#utility.yul\":316:368   */\n      iszero\n      tag_101\n      jumpi\n        /* \"#utility.yul\":364:365   */\n      0x00\n        /* \"#utility.yul\":361:362   */\n      0x00\n        /* \"#utility.yul\":354:366   */\n      revert\n        /* \"#utility.yul\":316:368   */\n    tag_101:\n      pop\n        /* \"#utility.yul\":409:432   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":236:462   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":878:1224   */\n    tag_41:\n        /* \"#utility.yul\":946:952   */\n      0x00\n        /* \"#utility.yul\":954:960   */\n      0x00\n        /* \"#utility.yul\":1007:1009   */\n      0x40\n        /* \"#utility.yul\":995:1004   */\n      dup4\n        /* \"#utility.yul\":986:993   */\n      dup6\n        /* \"#utility.yul\":982:1005   */\n      sub\n        /* \"#utility.yul\":978:1010   */\n      slt\n        /* \"#utility.yul\":975:1027   */\n      iszero\n      tag_105\n      jumpi\n        /* \"#utility.yul\":1023:1024   */\n      0x00\n        /* \"#utility.yul\":1020:1021   */\n      0x00\n        /* \"#utility.yul\":1013:1025   */\n      revert\n        /* \"#utility.yul\":975:1027   */\n    tag_105:\n      pop\n      pop\n        /* \"#utility.yul\":1068:1091   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1188:1190   */\n      0x20\n        /* \"#utility.yul\":1173:1191   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1160:1192   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":878:1224   */\n      jump\t// out\n        /* \"#utility.yul\":1229:1519   */\n    tag_54:\n        /* \"#utility.yul\":1299:1305   */\n      0x00\n        /* \"#utility.yul\":1352:1354   */\n      0x20\n        /* \"#utility.yul\":1340:1349   */\n      dup3\n        /* \"#utility.yul\":1331:1338   */\n      dup5\n        /* \"#utility.yul\":1327:1350   */\n      sub\n        /* \"#utility.yul\":1323:1355   */\n      slt\n        /* \"#utility.yul\":1320:1372   */\n      iszero\n      tag_107\n      jumpi\n        /* \"#utility.yul\":1368:1369   */\n      0x00\n        /* \"#utility.yul\":1365:1366   */\n      0x00\n        /* \"#utility.yul\":1358:1370   */\n      revert\n        /* \"#utility.yul\":1320:1372   */\n    tag_107:\n        /* \"#utility.yul\":1394:1410   */\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1439:1470   */\n      dup2\n      and\n        /* \"#utility.yul\":1429:1471   */\n      dup2\n      eq\n        /* \"#utility.yul\":1419:1489   */\n      tag_108\n      jumpi\n        /* \"#utility.yul\":1485:1486   */\n      0x00\n        /* \"#utility.yul\":1482:1483   */\n      0x00\n        /* \"#utility.yul\":1475:1487   */\n      revert\n        /* \"#utility.yul\":1419:1489   */\n    tag_108:\n        /* \"#utility.yul\":1508:1513   */\n      swap4\n        /* \"#utility.yul\":1229:1519   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1524:1651   */\n    tag_97:\n        /* \"#utility.yul\":1585:1595   */\n      0x4e487b71\n        /* \"#utility.yul\":1580:1583   */\n      0xe0\n        /* \"#utility.yul\":1576:1596   */\n      shl\n        /* \"#utility.yul\":1573:1574   */\n      0x00\n        /* \"#utility.yul\":1566:1597   */\n      mstore\n        /* \"#utility.yul\":1616:1620   */\n      0x11\n        /* \"#utility.yul\":1613:1614   */\n      0x04\n        /* \"#utility.yul\":1606:1621   */\n      mstore\n        /* \"#utility.yul\":1640:1644   */\n      0x24\n        /* \"#utility.yul\":1637:1638   */\n      0x00\n        /* \"#utility.yul\":1630:1645   */\n      revert\n        /* \"#utility.yul\":1656:1781   */\n    tag_60:\n        /* \"#utility.yul\":1721:1730   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":1742:1752   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":1739:1775   */\n      iszero\n      tag_44\n      jumpi\n        /* \"#utility.yul\":1755:1773   */\n      tag_44\n      tag_97\n      jump\t// in\n        /* \"#utility.yul\":1786:1970   */\n    tag_70:\n        /* \"#utility.yul\":1856:1862   */\n      0x00\n        /* \"#utility.yul\":1909:1911   */\n      0x20\n        /* \"#utility.yul\":1897:1906   */\n      dup3\n        /* \"#utility.yul\":1888:1895   */\n      dup5\n        /* \"#utility.yul\":1884:1907   */\n      sub\n        /* \"#utility.yul\":1880:1912   */\n      slt\n        /* \"#utility.yul\":1877:1929   */\n      iszero\n      tag_114\n      jumpi\n        /* \"#utility.yul\":1925:1926   */\n      0x00\n        /* \"#utility.yul\":1922:1923   */\n      0x00\n        /* \"#utility.yul\":1915:1927   */\n      revert\n        /* \"#utility.yul\":1877:1929   */\n    tag_114:\n      pop\n        /* \"#utility.yul\":1948:1964   */\n      mload\n      swap2\n        /* \"#utility.yul\":1786:1970   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1975:2103   */\n    tag_72:\n        /* \"#utility.yul\":2042:2051   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":2063:2074   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":2060:2097   */\n      iszero\n      tag_44\n      jumpi\n        /* \"#utility.yul\":2077:2095   */\n      tag_44\n      tag_97\n      jump\t// in\n        /* \"#utility.yul\":2108:2276   */\n    tag_78:\n        /* \"#utility.yul\":2181:2190   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":2212:2221   */\n      dup2\n      iszero\n        /* \"#utility.yul\":2229:2244   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":2223:2245   */\n      dup5\n      eq\n        /* \"#utility.yul\":2209:2246   */\n      or\n        /* \"#utility.yul\":2199:2270   */\n      tag_44\n      jumpi\n        /* \"#utility.yul\":2250:2268   */\n      tag_44\n      tag_97\n      jump\t// in\n        /* \"#utility.yul\":2281:2498   */\n    tag_80:\n        /* \"#utility.yul\":2321:2322   */\n      0x00\n        /* \"#utility.yul\":2347:2348   */\n      dup3\n        /* \"#utility.yul\":2337:2469   */\n      tag_122\n      jumpi\n        /* \"#utility.yul\":2391:2401   */\n      0x4e487b71\n        /* \"#utility.yul\":2386:2389   */\n      0xe0\n        /* \"#utility.yul\":2382:2402   */\n      shl\n        /* \"#utility.yul\":2379:2380   */\n      0x00\n        /* \"#utility.yul\":2372:2403   */\n      mstore\n        /* \"#utility.yul\":2426:2430   */\n      0x12\n        /* \"#utility.yul\":2423:2424   */\n      0x04\n        /* \"#utility.yul\":2416:2431   */\n      mstore\n        /* \"#utility.yul\":2454:2458   */\n      0x24\n        /* \"#utility.yul\":2451:2452   */\n      0x00\n        /* \"#utility.yul\":2444:2459   */\n      revert\n        /* \"#utility.yul\":2337:2469   */\n    tag_122:\n      pop\n        /* \"#utility.yul\":2483:2492   */\n      div\n      swap1\n        /* \"#utility.yul\":2281:2498   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212206656b7213bc8277a0f7604268390558531e8d78ec4c04eef60f4c11b849d08cd64736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_715": {
									"entryPoint": null,
									"id": 715,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_856": {
									"entryPoint": null,
									"id": 856,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_contract$_IERC20_$167t_contract$_IAutonomiNFT_$1007_fromMemory": {
									"entryPoint": 155,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"validator_revert_contract_IERC20": {
									"entryPoint": 132,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:596:11",
										"nodeType": "YulBlock",
										"src": "0:596:11",
										"statements": [
											{
												"nativeSrc": "6:3:11",
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "67:86:11",
													"nodeType": "YulBlock",
													"src": "67:86:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "131:16:11",
																"nodeType": "YulBlock",
																"src": "131:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "140:1:11",
																					"nodeType": "YulLiteral",
																					"src": "140:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "143:1:11",
																					"nodeType": "YulLiteral",
																					"src": "143:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "133:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "133:6:11"
																			},
																			"nativeSrc": "133:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "133:12:11"
																		},
																		"nativeSrc": "133:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "133:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "90:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "90:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "101:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "101:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "116:3:11",
																										"nodeType": "YulLiteral",
																										"src": "116:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "121:1:11",
																										"nodeType": "YulLiteral",
																										"src": "121:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "112:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "112:3:11"
																								},
																								"nativeSrc": "112:11:11",
																								"nodeType": "YulFunctionCall",
																								"src": "112:11:11"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "125:1:11",
																								"nodeType": "YulLiteral",
																								"src": "125:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "108:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "108:3:11"
																						},
																						"nativeSrc": "108:19:11",
																						"nodeType": "YulFunctionCall",
																						"src": "108:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "97:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "97:3:11"
																				},
																				"nativeSrc": "97:31:11",
																				"nodeType": "YulFunctionCall",
																				"src": "97:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "87:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "87:2:11"
																		},
																		"nativeSrc": "87:42:11",
																		"nodeType": "YulFunctionCall",
																		"src": "87:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "80:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "80:6:11"
																},
																"nativeSrc": "80:50:11",
																"nodeType": "YulFunctionCall",
																"src": "80:50:11"
															},
															"nativeSrc": "77:70:11",
															"nodeType": "YulIf",
															"src": "77:70:11"
														}
													]
												},
												"name": "validator_revert_contract_IERC20",
												"nativeSrc": "14:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "56:5:11",
														"nodeType": "YulTypedName",
														"src": "56:5:11",
														"type": ""
													}
												],
												"src": "14:139:11"
											},
											{
												"body": {
													"nativeSrc": "291:303:11",
													"nodeType": "YulBlock",
													"src": "291:303:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "337:16:11",
																"nodeType": "YulBlock",
																"src": "337:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "346:1:11",
																					"nodeType": "YulLiteral",
																					"src": "346:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "349:1:11",
																					"nodeType": "YulLiteral",
																					"src": "349:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "339:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "339:6:11"
																			},
																			"nativeSrc": "339:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "339:12:11"
																		},
																		"nativeSrc": "339:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "339:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "312:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "312:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "321:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "321:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "308:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "308:3:11"
																		},
																		"nativeSrc": "308:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "308:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "333:2:11",
																		"nodeType": "YulLiteral",
																		"src": "333:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "304:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "304:3:11"
																},
																"nativeSrc": "304:32:11",
																"nodeType": "YulFunctionCall",
																"src": "304:32:11"
															},
															"nativeSrc": "301:52:11",
															"nodeType": "YulIf",
															"src": "301:52:11"
														},
														{
															"nativeSrc": "362:29:11",
															"nodeType": "YulVariableDeclaration",
															"src": "362:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "381:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "381:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "375:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "375:5:11"
																},
																"nativeSrc": "375:16:11",
																"nodeType": "YulFunctionCall",
																"src": "375:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "366:5:11",
																	"nodeType": "YulTypedName",
																	"src": "366:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "433:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "433:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_contract_IERC20",
																	"nativeSrc": "400:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "400:32:11"
																},
																"nativeSrc": "400:39:11",
																"nodeType": "YulFunctionCall",
																"src": "400:39:11"
															},
															"nativeSrc": "400:39:11",
															"nodeType": "YulExpressionStatement",
															"src": "400:39:11"
														},
														{
															"nativeSrc": "448:15:11",
															"nodeType": "YulAssignment",
															"src": "448:15:11",
															"value": {
																"name": "value",
																"nativeSrc": "458:5:11",
																"nodeType": "YulIdentifier",
																"src": "458:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "448:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "448:6:11"
																}
															]
														},
														{
															"nativeSrc": "472:40:11",
															"nodeType": "YulVariableDeclaration",
															"src": "472:40:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "497:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "497:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "508:2:11",
																				"nodeType": "YulLiteral",
																				"src": "508:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "493:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "493:3:11"
																		},
																		"nativeSrc": "493:18:11",
																		"nodeType": "YulFunctionCall",
																		"src": "493:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "487:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "487:5:11"
																},
																"nativeSrc": "487:25:11",
																"nodeType": "YulFunctionCall",
																"src": "487:25:11"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "476:7:11",
																	"nodeType": "YulTypedName",
																	"src": "476:7:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nativeSrc": "554:7:11",
																		"nodeType": "YulIdentifier",
																		"src": "554:7:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_contract_IERC20",
																	"nativeSrc": "521:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "521:32:11"
																},
																"nativeSrc": "521:41:11",
																"nodeType": "YulFunctionCall",
																"src": "521:41:11"
															},
															"nativeSrc": "521:41:11",
															"nodeType": "YulExpressionStatement",
															"src": "521:41:11"
														},
														{
															"nativeSrc": "571:17:11",
															"nodeType": "YulAssignment",
															"src": "571:17:11",
															"value": {
																"name": "value_1",
																"nativeSrc": "581:7:11",
																"nodeType": "YulIdentifier",
																"src": "581:7:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "571:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "571:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC20_$167t_contract$_IAutonomiNFT_$1007_fromMemory",
												"nativeSrc": "158:436:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "249:9:11",
														"nodeType": "YulTypedName",
														"src": "249:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "260:7:11",
														"nodeType": "YulTypedName",
														"src": "260:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "272:6:11",
														"nodeType": "YulTypedName",
														"src": "272:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "280:6:11",
														"nodeType": "YulTypedName",
														"src": "280:6:11",
														"type": ""
													}
												],
												"src": "158:436:11"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$167t_contract$_IAutonomiNFT_$1007_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561000f575f5ffd5b5060405161072a38038061072a83398101604081905261002e9161009b565b60015f556001600160a01b038216158061004f57506001600160a01b038116155b1561006d576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b039182166080521660a0526100d3565b6001600160a01b0381168114610098575f5ffd5b50565b5f5f604083850312156100ac575f5ffd5b82516100b781610084565b60208401519092506100c881610084565b809150509250929050565b60805160a0516106236101075f395f818160ff015281816101a0015261032f01525f8181608e01526102ac01526106235ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80637f384acf116100585780637f384acf1461012b5780639c7e4a6614610135578063ba175dfa14610148578063c349026314610153575f5ffd5b806302db104b14610089578063170c62dc146100cd578063317e6d23146100fa5780634e30181014610121575b5f5ffd5b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ec6100db366004610502565b60016020525f908152604090205481565b6040519081526020016100c4565b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6100ec6276a70081565b6100ec62ed4e0081565b6100ec610143366004610502565b610168565b6100ec6367ab57e081565b610166610161366004610519565b610178565b005b5f6101728261030d565b92915050565b61018061040d565b6040516331a9108f60e11b81526004810183905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156101e5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102099190610539565b6001600160a01b03161461022f576040516282b42960e81b815260040160405180910390fd5b805f0361024f576040516307a1cab560e11b815260040160405180910390fd5b5f6102598361030d565b90508082111561027c5760405163d89f341b60e01b815260040160405180910390fd5b5f838152600160205260408120805484929061029990849061057a565b909155506102d390506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610435565b604051829084907fbde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a905f90a35061030960015f55565b5050565b60405163fd70d17760e01b8152600481018290525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fd70d17790602401602060405180830381865afa158015610374573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610398919061058d565b5f848152600160205260408120549192506103b76367ab57e0426105a4565b90505f62ed4e0082106103d5576103ce83856105a4565b9050610404565b6276a7008210610404578260646103ed8660326105b7565b6103f791906105ce565b61040191906105a4565b90505b95945050505050565b60025f540361042f57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261048790849061048c565b505050565b5f5f60205f8451602086015f885af1806104ab576040513d5f823e3d81fd5b50505f513d915081156104c25780600114156104cf565b6001600160a01b0384163b155b156104fc57604051635274afe760e01b81526001600160a01b038516600482015260240160405180910390fd5b50505050565b5f60208284031215610512575f5ffd5b5035919050565b5f5f6040838503121561052a575f5ffd5b50508035926020909101359150565b5f60208284031215610549575f5ffd5b81516001600160a01b038116811461055f575f5ffd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561017257610172610566565b5f6020828403121561059d575f5ffd5b5051919050565b8181038181111561017257610172610566565b808202811582820484141761017257610172610566565b5f826105e857634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212206656b7213bc8277a0f7604268390558531e8d78ec4c04eef60f4c11b849d08cd64736f6c634300081c0033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x72A CODESIZE SUB DUP1 PUSH2 0x72A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x9B JUMP JUMPDEST PUSH1 0x1 PUSH0 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x42BCDF7F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE PUSH2 0xD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x98 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xB7 DUP2 PUSH2 0x84 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0xC8 DUP2 PUSH2 0x84 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x623 PUSH2 0x107 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH1 0xFF ADD MSTORE DUP2 DUP2 PUSH2 0x1A0 ADD MSTORE PUSH2 0x32F ADD MSTORE PUSH0 DUP2 DUP2 PUSH1 0x8E ADD MSTORE PUSH2 0x2AC ADD MSTORE PUSH2 0x623 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F384ACF GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x7F384ACF EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x9C7E4A66 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xBA175DFA EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC3490263 EQ PUSH2 0x153 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x2DB104B EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x170C62DC EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x317E6D23 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4E301810 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xB0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEC PUSH2 0xDB CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4 JUMP JUMPDEST PUSH2 0xB0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH3 0x76A700 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH3 0xED4E00 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0xEC PUSH4 0x67AB57E0 DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH2 0x172 DUP3 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E5 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x539 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH3 0x82B429 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH0 SUB PUSH2 0x24F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A1CAB5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x259 DUP4 PUSH2 0x30D JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x27C JUMPI PUSH1 0x40 MLOAD PUSH4 0xD89F341B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x299 SWAP1 DUP5 SWAP1 PUSH2 0x57A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2D3 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP5 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 DUP5 SWAP1 PUSH32 0xBDE2D72390AF9D0444BB1C4F938971ECB673ED26F5F57F8FA44C553FE01D0D3A SWAP1 PUSH0 SWAP1 LOG3 POP PUSH2 0x309 PUSH1 0x1 PUSH0 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFD70D177 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xFD70D177 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x374 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x3B7 PUSH4 0x67AB57E0 TIMESTAMP PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xED4E00 DUP3 LT PUSH2 0x3D5 JUMPI PUSH2 0x3CE DUP4 DUP6 PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP PUSH2 0x404 JUMP JUMPDEST PUSH3 0x76A700 DUP3 LT PUSH2 0x404 JUMPI DUP3 PUSH1 0x64 PUSH2 0x3ED DUP7 PUSH1 0x32 PUSH2 0x5B7 JUMP JUMPDEST PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH2 0x401 SWAP2 SWAP1 PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD SUB PUSH2 0x42F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x487 SWAP1 DUP5 SWAP1 PUSH2 0x48C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x4C2 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x512 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x549 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x55F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59D JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x5E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x56B7213BC8277A 0xF PUSH23 0x4268390558531E8D78EC4C04EEF60F4C11B849D08CD64 PUSH20 0x6F6C634300081C00330000000000000000000000 ",
							"sourceMap": "329:2862:8:-:0;;;912:268;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1857:1:6;2061:7;:21;-1:-1:-1;;;;;981:31:8;;;;:69;;-1:-1:-1;;;;;;1016:34:8;;;981:69;977:130;;;1073:23;;-1:-1:-1;;;1073:23:8;;;;;;;;;;;977:130;-1:-1:-1;;;;;1117:20:8;;;;;1147:26;;;329:2862;;14:139:11;-1:-1:-1;;;;;97:31:11;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:436::-;272:6;280;333:2;321:9;312:7;308:23;304:32;301:52;;;349:1;346;339:12;301:52;381:9;375:16;400:39;433:5;400:39;:::i;:::-;508:2;493:18;;487:25;458:5;;-1:-1:-1;521:41:11;487:25;521:41;:::i;:::-;581:7;571:17;;;158:436;;;;;:::o;:::-;329:2862:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@ANT_TOKEN_811": {
									"entryPoint": null,
									"id": 811,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@AUTONOMI_NFT_814": {
									"entryPoint": null,
									"id": 814,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@VESTING_PERIOD_1_801": {
									"entryPoint": null,
									"id": 801,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@VESTING_PERIOD_2_804": {
									"entryPoint": null,
									"id": 804,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@VESTING_START_TIMESTAMP_798": {
									"entryPoint": null,
									"id": 798,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_callOptionalReturn_534": {
									"entryPoint": 1164,
									"id": 534,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_claimable_993": {
									"entryPoint": 781,
									"id": 993,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_750": {
									"entryPoint": null,
									"id": 750,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_742": {
									"entryPoint": 1037,
									"id": 742,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@claim_920": {
									"entryPoint": 376,
									"id": 920,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@getClaimable_932": {
									"entryPoint": 360,
									"id": 932,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransfer_212": {
									"entryPoint": 1077,
									"id": 212,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@totalAntClaimedForTokenId_808": {
									"entryPoint": null,
									"id": 808,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1337,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1282,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1421,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 1305,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IAutonomiNFT_$1007__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 1486,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1463,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1444,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1382,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:2987:11",
										"nodeType": "YulBlock",
										"src": "0:2987:11",
										"statements": [
											{
												"nativeSrc": "6:3:11",
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "129:102:11",
													"nodeType": "YulBlock",
													"src": "129:102:11",
													"statements": [
														{
															"nativeSrc": "139:26:11",
															"nodeType": "YulAssignment",
															"src": "139:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "151:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "151:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "162:2:11",
																		"nodeType": "YulLiteral",
																		"src": "162:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "147:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "147:3:11"
																},
																"nativeSrc": "147:18:11",
																"nodeType": "YulFunctionCall",
																"src": "147:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "139:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "139:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "181:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "181:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "196:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "196:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "212:3:11",
																								"nodeType": "YulLiteral",
																								"src": "212:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "217:1:11",
																								"nodeType": "YulLiteral",
																								"src": "217:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "208:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "208:3:11"
																						},
																						"nativeSrc": "208:11:11",
																						"nodeType": "YulFunctionCall",
																						"src": "208:11:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "221:1:11",
																						"nodeType": "YulLiteral",
																						"src": "221:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "204:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "204:3:11"
																				},
																				"nativeSrc": "204:19:11",
																				"nodeType": "YulFunctionCall",
																				"src": "204:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "192:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "192:3:11"
																		},
																		"nativeSrc": "192:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "192:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "174:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "174:6:11"
																},
																"nativeSrc": "174:51:11",
																"nodeType": "YulFunctionCall",
																"src": "174:51:11"
															},
															"nativeSrc": "174:51:11",
															"nodeType": "YulExpressionStatement",
															"src": "174:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed",
												"nativeSrc": "14:217:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "98:9:11",
														"nodeType": "YulTypedName",
														"src": "98:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "109:6:11",
														"nodeType": "YulTypedName",
														"src": "109:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "120:4:11",
														"nodeType": "YulTypedName",
														"src": "120:4:11",
														"type": ""
													}
												],
												"src": "14:217:11"
											},
											{
												"body": {
													"nativeSrc": "306:156:11",
													"nodeType": "YulBlock",
													"src": "306:156:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "352:16:11",
																"nodeType": "YulBlock",
																"src": "352:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "361:1:11",
																					"nodeType": "YulLiteral",
																					"src": "361:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "364:1:11",
																					"nodeType": "YulLiteral",
																					"src": "364:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "354:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "354:6:11"
																			},
																			"nativeSrc": "354:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "354:12:11"
																		},
																		"nativeSrc": "354:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "354:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "327:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "327:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "336:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "336:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "323:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "323:3:11"
																		},
																		"nativeSrc": "323:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "323:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "348:2:11",
																		"nodeType": "YulLiteral",
																		"src": "348:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "319:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "319:3:11"
																},
																"nativeSrc": "319:32:11",
																"nodeType": "YulFunctionCall",
																"src": "319:32:11"
															},
															"nativeSrc": "316:52:11",
															"nodeType": "YulIf",
															"src": "316:52:11"
														},
														{
															"nativeSrc": "377:14:11",
															"nodeType": "YulVariableDeclaration",
															"src": "377:14:11",
															"value": {
																"kind": "number",
																"nativeSrc": "390:1:11",
																"nodeType": "YulLiteral",
																"src": "390:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "381:5:11",
																	"nodeType": "YulTypedName",
																	"src": "381:5:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "400:32:11",
															"nodeType": "YulAssignment",
															"src": "400:32:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "422:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "409:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "409:12:11"
																},
																"nativeSrc": "409:23:11",
																"nodeType": "YulFunctionCall",
																"src": "409:23:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "400:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "400:5:11"
																}
															]
														},
														{
															"nativeSrc": "441:15:11",
															"nodeType": "YulAssignment",
															"src": "441:15:11",
															"value": {
																"name": "value",
																"nativeSrc": "451:5:11",
																"nodeType": "YulIdentifier",
																"src": "451:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "441:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "441:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "236:226:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "272:9:11",
														"nodeType": "YulTypedName",
														"src": "272:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "283:7:11",
														"nodeType": "YulTypedName",
														"src": "283:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "295:6:11",
														"nodeType": "YulTypedName",
														"src": "295:6:11",
														"type": ""
													}
												],
												"src": "236:226:11"
											},
											{
												"body": {
													"nativeSrc": "568:76:11",
													"nodeType": "YulBlock",
													"src": "568:76:11",
													"statements": [
														{
															"nativeSrc": "578:26:11",
															"nodeType": "YulAssignment",
															"src": "578:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "590:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "601:2:11",
																		"nodeType": "YulLiteral",
																		"src": "601:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "586:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "586:3:11"
																},
																"nativeSrc": "586:18:11",
																"nodeType": "YulFunctionCall",
																"src": "586:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "578:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "578:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "620:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "620:9:11"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "631:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "631:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "613:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "613:6:11"
																},
																"nativeSrc": "613:25:11",
																"nodeType": "YulFunctionCall",
																"src": "613:25:11"
															},
															"nativeSrc": "613:25:11",
															"nodeType": "YulExpressionStatement",
															"src": "613:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "467:177:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "537:9:11",
														"nodeType": "YulTypedName",
														"src": "537:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "548:6:11",
														"nodeType": "YulTypedName",
														"src": "548:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "559:4:11",
														"nodeType": "YulTypedName",
														"src": "559:4:11",
														"type": ""
													}
												],
												"src": "467:177:11"
											},
											{
												"body": {
													"nativeSrc": "771:102:11",
													"nodeType": "YulBlock",
													"src": "771:102:11",
													"statements": [
														{
															"nativeSrc": "781:26:11",
															"nodeType": "YulAssignment",
															"src": "781:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "793:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "793:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "804:2:11",
																		"nodeType": "YulLiteral",
																		"src": "804:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "789:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "789:3:11"
																},
																"nativeSrc": "789:18:11",
																"nodeType": "YulFunctionCall",
																"src": "789:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "781:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "781:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "823:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "823:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "838:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "838:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "854:3:11",
																								"nodeType": "YulLiteral",
																								"src": "854:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "859:1:11",
																								"nodeType": "YulLiteral",
																								"src": "859:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "850:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "850:3:11"
																						},
																						"nativeSrc": "850:11:11",
																						"nodeType": "YulFunctionCall",
																						"src": "850:11:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "863:1:11",
																						"nodeType": "YulLiteral",
																						"src": "863:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "846:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "846:3:11"
																				},
																				"nativeSrc": "846:19:11",
																				"nodeType": "YulFunctionCall",
																				"src": "846:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "834:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "834:3:11"
																		},
																		"nativeSrc": "834:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "834:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "816:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "816:6:11"
																},
																"nativeSrc": "816:51:11",
																"nodeType": "YulFunctionCall",
																"src": "816:51:11"
															},
															"nativeSrc": "816:51:11",
															"nodeType": "YulExpressionStatement",
															"src": "816:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IAutonomiNFT_$1007__to_t_address__fromStack_reversed",
												"nativeSrc": "649:224:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "740:9:11",
														"nodeType": "YulTypedName",
														"src": "740:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "751:6:11",
														"nodeType": "YulTypedName",
														"src": "751:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "762:4:11",
														"nodeType": "YulTypedName",
														"src": "762:4:11",
														"type": ""
													}
												],
												"src": "649:224:11"
											},
											{
												"body": {
													"nativeSrc": "965:259:11",
													"nodeType": "YulBlock",
													"src": "965:259:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1011:16:11",
																"nodeType": "YulBlock",
																"src": "1011:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1020:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1020:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1023:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1023:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1013:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1013:6:11"
																			},
																			"nativeSrc": "1013:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1013:12:11"
																		},
																		"nativeSrc": "1013:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1013:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "986:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "986:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "995:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "995:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "982:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "982:3:11"
																		},
																		"nativeSrc": "982:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "982:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1007:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1007:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "978:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "978:3:11"
																},
																"nativeSrc": "978:32:11",
																"nodeType": "YulFunctionCall",
																"src": "978:32:11"
															},
															"nativeSrc": "975:52:11",
															"nodeType": "YulIf",
															"src": "975:52:11"
														},
														{
															"nativeSrc": "1036:14:11",
															"nodeType": "YulVariableDeclaration",
															"src": "1036:14:11",
															"value": {
																"kind": "number",
																"nativeSrc": "1049:1:11",
																"nodeType": "YulLiteral",
																"src": "1049:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1040:5:11",
																	"nodeType": "YulTypedName",
																	"src": "1040:5:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1059:32:11",
															"nodeType": "YulAssignment",
															"src": "1059:32:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1081:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "1081:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1068:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "1068:12:11"
																},
																"nativeSrc": "1068:23:11",
																"nodeType": "YulFunctionCall",
																"src": "1068:23:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1059:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1059:5:11"
																}
															]
														},
														{
															"nativeSrc": "1100:15:11",
															"nodeType": "YulAssignment",
															"src": "1100:15:11",
															"value": {
																"name": "value",
																"nativeSrc": "1110:5:11",
																"nodeType": "YulIdentifier",
																"src": "1110:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1100:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1100:6:11"
																}
															]
														},
														{
															"nativeSrc": "1124:16:11",
															"nodeType": "YulVariableDeclaration",
															"src": "1124:16:11",
															"value": {
																"kind": "number",
																"nativeSrc": "1139:1:11",
																"nodeType": "YulLiteral",
																"src": "1139:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "1128:7:11",
																	"nodeType": "YulTypedName",
																	"src": "1128:7:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1149:43:11",
															"nodeType": "YulAssignment",
															"src": "1149:43:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1177:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1177:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1188:2:11",
																				"nodeType": "YulLiteral",
																				"src": "1188:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1173:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1173:3:11"
																		},
																		"nativeSrc": "1173:18:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1173:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1160:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "1160:12:11"
																},
																"nativeSrc": "1160:32:11",
																"nodeType": "YulFunctionCall",
																"src": "1160:32:11"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "1149:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "1149:7:11"
																}
															]
														},
														{
															"nativeSrc": "1201:17:11",
															"nodeType": "YulAssignment",
															"src": "1201:17:11",
															"value": {
																"name": "value_1",
																"nativeSrc": "1211:7:11",
																"nodeType": "YulIdentifier",
																"src": "1211:7:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1201:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1201:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nativeSrc": "878:346:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "923:9:11",
														"nodeType": "YulTypedName",
														"src": "923:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "934:7:11",
														"nodeType": "YulTypedName",
														"src": "934:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "946:6:11",
														"nodeType": "YulTypedName",
														"src": "946:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "954:6:11",
														"nodeType": "YulTypedName",
														"src": "954:6:11",
														"type": ""
													}
												],
												"src": "878:346:11"
											},
											{
												"body": {
													"nativeSrc": "1310:209:11",
													"nodeType": "YulBlock",
													"src": "1310:209:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1356:16:11",
																"nodeType": "YulBlock",
																"src": "1356:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1365:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1365:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1368:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1368:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1358:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1358:6:11"
																			},
																			"nativeSrc": "1358:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1358:12:11"
																		},
																		"nativeSrc": "1358:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1358:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1331:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "1331:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1340:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1340:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1327:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1327:3:11"
																		},
																		"nativeSrc": "1327:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1327:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1352:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1352:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1323:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1323:3:11"
																},
																"nativeSrc": "1323:32:11",
																"nodeType": "YulFunctionCall",
																"src": "1323:32:11"
															},
															"nativeSrc": "1320:52:11",
															"nodeType": "YulIf",
															"src": "1320:52:11"
														},
														{
															"nativeSrc": "1381:29:11",
															"nodeType": "YulVariableDeclaration",
															"src": "1381:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1400:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "1400:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1394:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1394:5:11"
																},
																"nativeSrc": "1394:16:11",
																"nodeType": "YulFunctionCall",
																"src": "1394:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1385:5:11",
																	"nodeType": "YulTypedName",
																	"src": "1385:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1473:16:11",
																"nodeType": "YulBlock",
																"src": "1473:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1482:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1482:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1485:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1485:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1475:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1475:6:11"
																			},
																			"nativeSrc": "1475:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1475:12:11"
																		},
																		"nativeSrc": "1475:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1475:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1432:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "1432:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1443:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "1443:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1458:3:11",
																										"nodeType": "YulLiteral",
																										"src": "1458:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "1463:1:11",
																										"nodeType": "YulLiteral",
																										"src": "1463:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1454:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "1454:3:11"
																								},
																								"nativeSrc": "1454:11:11",
																								"nodeType": "YulFunctionCall",
																								"src": "1454:11:11"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1467:1:11",
																								"nodeType": "YulLiteral",
																								"src": "1467:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "1450:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "1450:3:11"
																						},
																						"nativeSrc": "1450:19:11",
																						"nodeType": "YulFunctionCall",
																						"src": "1450:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "1439:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "1439:3:11"
																				},
																				"nativeSrc": "1439:31:11",
																				"nodeType": "YulFunctionCall",
																				"src": "1439:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1429:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "1429:2:11"
																		},
																		"nativeSrc": "1429:42:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1429:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1422:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:11"
																},
																"nativeSrc": "1422:50:11",
																"nodeType": "YulFunctionCall",
																"src": "1422:50:11"
															},
															"nativeSrc": "1419:70:11",
															"nodeType": "YulIf",
															"src": "1419:70:11"
														},
														{
															"nativeSrc": "1498:15:11",
															"nodeType": "YulAssignment",
															"src": "1498:15:11",
															"value": {
																"name": "value",
																"nativeSrc": "1508:5:11",
																"nodeType": "YulIdentifier",
																"src": "1508:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1498:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1498:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "1229:290:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1276:9:11",
														"nodeType": "YulTypedName",
														"src": "1276:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1287:7:11",
														"nodeType": "YulTypedName",
														"src": "1287:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1299:6:11",
														"nodeType": "YulTypedName",
														"src": "1299:6:11",
														"type": ""
													}
												],
												"src": "1229:290:11"
											},
											{
												"body": {
													"nativeSrc": "1556:95:11",
													"nodeType": "YulBlock",
													"src": "1556:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1573:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1573:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1580:3:11",
																				"nodeType": "YulLiteral",
																				"src": "1580:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1585:10:11",
																				"nodeType": "YulLiteral",
																				"src": "1585:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1576:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1576:3:11"
																		},
																		"nativeSrc": "1576:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1576:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1566:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1566:6:11"
																},
																"nativeSrc": "1566:31:11",
																"nodeType": "YulFunctionCall",
																"src": "1566:31:11"
															},
															"nativeSrc": "1566:31:11",
															"nodeType": "YulExpressionStatement",
															"src": "1566:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1613:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1613:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1616:4:11",
																		"nodeType": "YulLiteral",
																		"src": "1616:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1606:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1606:6:11"
																},
																"nativeSrc": "1606:15:11",
																"nodeType": "YulFunctionCall",
																"src": "1606:15:11"
															},
															"nativeSrc": "1606:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "1606:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1637:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1637:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1640:4:11",
																		"nodeType": "YulLiteral",
																		"src": "1640:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1630:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1630:6:11"
																},
																"nativeSrc": "1630:15:11",
																"nodeType": "YulFunctionCall",
																"src": "1630:15:11"
															},
															"nativeSrc": "1630:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "1630:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "1524:127:11",
												"nodeType": "YulFunctionDefinition",
												"src": "1524:127:11"
											},
											{
												"body": {
													"nativeSrc": "1704:77:11",
													"nodeType": "YulBlock",
													"src": "1704:77:11",
													"statements": [
														{
															"nativeSrc": "1714:16:11",
															"nodeType": "YulAssignment",
															"src": "1714:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "1725:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "1725:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "1728:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "1728:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1721:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1721:3:11"
																},
																"nativeSrc": "1721:9:11",
																"nodeType": "YulFunctionCall",
																"src": "1721:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "1714:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1714:3:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1753:22:11",
																"nodeType": "YulBlock",
																"src": "1753:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "1755:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "1755:16:11"
																			},
																			"nativeSrc": "1755:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1755:18:11"
																		},
																		"nativeSrc": "1755:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1755:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "1745:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "1745:1:11"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "1748:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "1748:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1742:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "1742:2:11"
																},
																"nativeSrc": "1742:10:11",
																"nodeType": "YulFunctionCall",
																"src": "1742:10:11"
															},
															"nativeSrc": "1739:36:11",
															"nodeType": "YulIf",
															"src": "1739:36:11"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "1656:125:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "1687:1:11",
														"nodeType": "YulTypedName",
														"src": "1687:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "1690:1:11",
														"nodeType": "YulTypedName",
														"src": "1690:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "1696:3:11",
														"nodeType": "YulTypedName",
														"src": "1696:3:11",
														"type": ""
													}
												],
												"src": "1656:125:11"
											},
											{
												"body": {
													"nativeSrc": "1867:103:11",
													"nodeType": "YulBlock",
													"src": "1867:103:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1913:16:11",
																"nodeType": "YulBlock",
																"src": "1913:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1922:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1922:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1925:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1925:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1915:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1915:6:11"
																			},
																			"nativeSrc": "1915:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1915:12:11"
																		},
																		"nativeSrc": "1915:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1915:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1888:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "1888:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1897:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1897:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1884:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1884:3:11"
																		},
																		"nativeSrc": "1884:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1884:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1909:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1909:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1880:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1880:3:11"
																},
																"nativeSrc": "1880:32:11",
																"nodeType": "YulFunctionCall",
																"src": "1880:32:11"
															},
															"nativeSrc": "1877:52:11",
															"nodeType": "YulIf",
															"src": "1877:52:11"
														},
														{
															"nativeSrc": "1938:26:11",
															"nodeType": "YulAssignment",
															"src": "1938:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1954:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "1954:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1948:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1948:5:11"
																},
																"nativeSrc": "1948:16:11",
																"nodeType": "YulFunctionCall",
																"src": "1948:16:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1938:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1938:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "1786:184:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1833:9:11",
														"nodeType": "YulTypedName",
														"src": "1833:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1844:7:11",
														"nodeType": "YulTypedName",
														"src": "1844:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1856:6:11",
														"nodeType": "YulTypedName",
														"src": "1856:6:11",
														"type": ""
													}
												],
												"src": "1786:184:11"
											},
											{
												"body": {
													"nativeSrc": "2024:79:11",
													"nodeType": "YulBlock",
													"src": "2024:79:11",
													"statements": [
														{
															"nativeSrc": "2034:17:11",
															"nodeType": "YulAssignment",
															"src": "2034:17:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2046:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2046:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2049:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2049:1:11"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "2042:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2042:3:11"
																},
																"nativeSrc": "2042:9:11",
																"nodeType": "YulFunctionCall",
																"src": "2042:9:11"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "2034:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "2034:4:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2075:22:11",
																"nodeType": "YulBlock",
																"src": "2075:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "2077:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "2077:16:11"
																			},
																			"nativeSrc": "2077:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2077:18:11"
																		},
																		"nativeSrc": "2077:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2077:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "2066:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "2066:4:11"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "2072:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2072:1:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2063:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "2063:2:11"
																},
																"nativeSrc": "2063:11:11",
																"nodeType": "YulFunctionCall",
																"src": "2063:11:11"
															},
															"nativeSrc": "2060:37:11",
															"nodeType": "YulIf",
															"src": "2060:37:11"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "1975:128:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2006:1:11",
														"nodeType": "YulTypedName",
														"src": "2006:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2009:1:11",
														"nodeType": "YulTypedName",
														"src": "2009:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "2015:4:11",
														"nodeType": "YulTypedName",
														"src": "2015:4:11",
														"type": ""
													}
												],
												"src": "1975:128:11"
											},
											{
												"body": {
													"nativeSrc": "2160:116:11",
													"nodeType": "YulBlock",
													"src": "2160:116:11",
													"statements": [
														{
															"nativeSrc": "2170:20:11",
															"nodeType": "YulAssignment",
															"src": "2170:20:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2185:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2185:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2188:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2188:1:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "2181:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2181:3:11"
																},
																"nativeSrc": "2181:9:11",
																"nodeType": "YulFunctionCall",
																"src": "2181:9:11"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "2170:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "2170:7:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2248:22:11",
																"nodeType": "YulBlock",
																"src": "2248:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "2250:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "2250:16:11"
																			},
																			"nativeSrc": "2250:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2250:18:11"
																		},
																		"nativeSrc": "2250:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2250:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "2219:1:11",
																						"nodeType": "YulIdentifier",
																						"src": "2219:1:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "2212:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "2212:6:11"
																				},
																				"nativeSrc": "2212:9:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2212:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "2226:1:11",
																						"nodeType": "YulIdentifier",
																						"src": "2226:1:11"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "2233:7:11",
																								"nodeType": "YulIdentifier",
																								"src": "2233:7:11"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "2242:1:11",
																								"nodeType": "YulIdentifier",
																								"src": "2242:1:11"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "2229:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "2229:3:11"
																						},
																						"nativeSrc": "2229:15:11",
																						"nodeType": "YulFunctionCall",
																						"src": "2229:15:11"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "2223:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "2223:2:11"
																				},
																				"nativeSrc": "2223:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2223:22:11"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2209:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "2209:2:11"
																		},
																		"nativeSrc": "2209:37:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2209:37:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2202:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2202:6:11"
																},
																"nativeSrc": "2202:45:11",
																"nodeType": "YulFunctionCall",
																"src": "2202:45:11"
															},
															"nativeSrc": "2199:71:11",
															"nodeType": "YulIf",
															"src": "2199:71:11"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "2108:168:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2139:1:11",
														"nodeType": "YulTypedName",
														"src": "2139:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2142:1:11",
														"nodeType": "YulTypedName",
														"src": "2142:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "2148:7:11",
														"nodeType": "YulTypedName",
														"src": "2148:7:11",
														"type": ""
													}
												],
												"src": "2108:168:11"
											},
											{
												"body": {
													"nativeSrc": "2327:171:11",
													"nodeType": "YulBlock",
													"src": "2327:171:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2358:111:11",
																"nodeType": "YulBlock",
																"src": "2358:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2379:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2379:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2386:3:11",
																							"nodeType": "YulLiteral",
																							"src": "2386:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2391:10:11",
																							"nodeType": "YulLiteral",
																							"src": "2391:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2382:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "2382:3:11"
																					},
																					"nativeSrc": "2382:20:11",
																					"nodeType": "YulFunctionCall",
																					"src": "2382:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2372:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2372:6:11"
																			},
																			"nativeSrc": "2372:31:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2372:31:11"
																		},
																		"nativeSrc": "2372:31:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2372:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2423:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2423:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2426:4:11",
																					"nodeType": "YulLiteral",
																					"src": "2426:4:11",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2416:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2416:6:11"
																			},
																			"nativeSrc": "2416:15:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2416:15:11"
																		},
																		"nativeSrc": "2416:15:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2416:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2451:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2451:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2454:4:11",
																					"nodeType": "YulLiteral",
																					"src": "2454:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2444:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2444:6:11"
																			},
																			"nativeSrc": "2444:15:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2444:15:11"
																		},
																		"nativeSrc": "2444:15:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2444:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "2347:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2347:1:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2340:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2340:6:11"
																},
																"nativeSrc": "2340:9:11",
																"nodeType": "YulFunctionCall",
																"src": "2340:9:11"
															},
															"nativeSrc": "2337:132:11",
															"nodeType": "YulIf",
															"src": "2337:132:11"
														},
														{
															"nativeSrc": "2478:14:11",
															"nodeType": "YulAssignment",
															"src": "2478:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2487:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2487:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2490:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "2490:1:11"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2483:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2483:3:11"
																},
																"nativeSrc": "2483:9:11",
																"nodeType": "YulFunctionCall",
																"src": "2483:9:11"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "2478:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "2478:1:11"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "2281:217:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2312:1:11",
														"nodeType": "YulTypedName",
														"src": "2312:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2315:1:11",
														"nodeType": "YulTypedName",
														"src": "2315:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "2321:1:11",
														"nodeType": "YulTypedName",
														"src": "2321:1:11",
														"type": ""
													}
												],
												"src": "2281:217:11"
											},
											{
												"body": {
													"nativeSrc": "2632:145:11",
													"nodeType": "YulBlock",
													"src": "2632:145:11",
													"statements": [
														{
															"nativeSrc": "2642:26:11",
															"nodeType": "YulAssignment",
															"src": "2642:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2654:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "2654:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2665:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2665:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2650:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2650:3:11"
																},
																"nativeSrc": "2650:18:11",
																"nodeType": "YulFunctionCall",
																"src": "2650:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2642:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "2642:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2684:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "2684:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2699:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2699:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2715:3:11",
																								"nodeType": "YulLiteral",
																								"src": "2715:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2720:1:11",
																								"nodeType": "YulLiteral",
																								"src": "2720:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2711:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "2711:3:11"
																						},
																						"nativeSrc": "2711:11:11",
																						"nodeType": "YulFunctionCall",
																						"src": "2711:11:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2724:1:11",
																						"nodeType": "YulLiteral",
																						"src": "2724:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2707:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2707:3:11"
																				},
																				"nativeSrc": "2707:19:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2707:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2695:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2695:3:11"
																		},
																		"nativeSrc": "2695:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2695:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2677:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2677:6:11"
																},
																"nativeSrc": "2677:51:11",
																"nodeType": "YulFunctionCall",
																"src": "2677:51:11"
															},
															"nativeSrc": "2677:51:11",
															"nodeType": "YulExpressionStatement",
															"src": "2677:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2748:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2759:2:11",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2744:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:11"
																		},
																		"nativeSrc": "2744:18:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:11"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "2764:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2764:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2737:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:11"
																},
																"nativeSrc": "2737:34:11",
																"nodeType": "YulFunctionCall",
																"src": "2737:34:11"
															},
															"nativeSrc": "2737:34:11",
															"nodeType": "YulExpressionStatement",
															"src": "2737:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "2503:274:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2593:9:11",
														"nodeType": "YulTypedName",
														"src": "2593:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2604:6:11",
														"nodeType": "YulTypedName",
														"src": "2604:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2612:6:11",
														"nodeType": "YulTypedName",
														"src": "2612:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2623:4:11",
														"nodeType": "YulTypedName",
														"src": "2623:4:11",
														"type": ""
													}
												],
												"src": "2503:274:11"
											},
											{
												"body": {
													"nativeSrc": "2883:102:11",
													"nodeType": "YulBlock",
													"src": "2883:102:11",
													"statements": [
														{
															"nativeSrc": "2893:26:11",
															"nodeType": "YulAssignment",
															"src": "2893:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2905:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "2905:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2916:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2916:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2901:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2901:3:11"
																},
																"nativeSrc": "2901:18:11",
																"nodeType": "YulFunctionCall",
																"src": "2901:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2893:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "2893:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2935:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "2935:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2950:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2950:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2966:3:11",
																								"nodeType": "YulLiteral",
																								"src": "2966:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2971:1:11",
																								"nodeType": "YulLiteral",
																								"src": "2971:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2962:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "2962:3:11"
																						},
																						"nativeSrc": "2962:11:11",
																						"nodeType": "YulFunctionCall",
																						"src": "2962:11:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2975:1:11",
																						"nodeType": "YulLiteral",
																						"src": "2975:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2958:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2958:3:11"
																				},
																				"nativeSrc": "2958:19:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2958:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2946:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2946:3:11"
																		},
																		"nativeSrc": "2946:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2946:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2928:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2928:6:11"
																},
																"nativeSrc": "2928:51:11",
																"nodeType": "YulFunctionCall",
																"src": "2928:51:11"
															},
															"nativeSrc": "2928:51:11",
															"nodeType": "YulExpressionStatement",
															"src": "2928:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2782:203:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2852:9:11",
														"nodeType": "YulTypedName",
														"src": "2852:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2863:6:11",
														"nodeType": "YulTypedName",
														"src": "2863:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2874:4:11",
														"nodeType": "YulTypedName",
														"src": "2874:4:11",
														"type": ""
													}
												],
												"src": "2782:203:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_contract$_IERC20_$167__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IAutonomiNFT_$1007__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"811": [
									{
										"length": 32,
										"start": 142
									},
									{
										"length": 32,
										"start": 684
									}
								],
								"814": [
									{
										"length": 32,
										"start": 255
									},
									{
										"length": 32,
										"start": 416
									},
									{
										"length": 32,
										"start": 815
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80637f384acf116100585780637f384acf1461012b5780639c7e4a6614610135578063ba175dfa14610148578063c349026314610153575f5ffd5b806302db104b14610089578063170c62dc146100cd578063317e6d23146100fa5780634e30181014610121575b5f5ffd5b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ec6100db366004610502565b60016020525f908152604090205481565b6040519081526020016100c4565b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6100ec6276a70081565b6100ec62ed4e0081565b6100ec610143366004610502565b610168565b6100ec6367ab57e081565b610166610161366004610519565b610178565b005b5f6101728261030d565b92915050565b61018061040d565b6040516331a9108f60e11b81526004810183905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156101e5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102099190610539565b6001600160a01b03161461022f576040516282b42960e81b815260040160405180910390fd5b805f0361024f576040516307a1cab560e11b815260040160405180910390fd5b5f6102598361030d565b90508082111561027c5760405163d89f341b60e01b815260040160405180910390fd5b5f838152600160205260408120805484929061029990849061057a565b909155506102d390506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610435565b604051829084907fbde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a905f90a35061030960015f55565b5050565b60405163fd70d17760e01b8152600481018290525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fd70d17790602401602060405180830381865afa158015610374573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610398919061058d565b5f848152600160205260408120549192506103b76367ab57e0426105a4565b90505f62ed4e0082106103d5576103ce83856105a4565b9050610404565b6276a7008210610404578260646103ed8660326105b7565b6103f791906105ce565b61040191906105a4565b90505b95945050505050565b60025f540361042f57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261048790849061048c565b505050565b5f5f60205f8451602086015f885af1806104ab576040513d5f823e3d81fd5b50505f513d915081156104c25780600114156104cf565b6001600160a01b0384163b155b156104fc57604051635274afe760e01b81526001600160a01b038516600482015260240160405180910390fd5b50505050565b5f60208284031215610512575f5ffd5b5035919050565b5f5f6040838503121561052a575f5ffd5b50508035926020909101359150565b5f60208284031215610549575f5ffd5b81516001600160a01b038116811461055f575f5ffd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561017257610172610566565b5f6020828403121561059d575f5ffd5b5051919050565b8181038181111561017257610172610566565b808202811582820484141761017257610172610566565b5f826105e857634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212206656b7213bc8277a0f7604268390558531e8d78ec4c04eef60f4c11b849d08cd64736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F384ACF GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x7F384ACF EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x9C7E4A66 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xBA175DFA EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC3490263 EQ PUSH2 0x153 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x2DB104B EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x170C62DC EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x317E6D23 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4E301810 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xB0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEC PUSH2 0xDB CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4 JUMP JUMPDEST PUSH2 0xB0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH3 0x76A700 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH3 0xED4E00 DUP2 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH2 0x168 JUMP JUMPDEST PUSH2 0xEC PUSH4 0x67AB57E0 DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH2 0x172 DUP3 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E5 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x539 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH3 0x82B429 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH0 SUB PUSH2 0x24F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A1CAB5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x259 DUP4 PUSH2 0x30D JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x27C JUMPI PUSH1 0x40 MLOAD PUSH4 0xD89F341B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x299 SWAP1 DUP5 SWAP1 PUSH2 0x57A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2D3 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP5 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 DUP5 SWAP1 PUSH32 0xBDE2D72390AF9D0444BB1C4F938971ECB673ED26F5F57F8FA44C553FE01D0D3A SWAP1 PUSH0 SWAP1 LOG3 POP PUSH2 0x309 PUSH1 0x1 PUSH0 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFD70D177 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xFD70D177 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x374 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x3B7 PUSH4 0x67AB57E0 TIMESTAMP PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xED4E00 DUP3 LT PUSH2 0x3D5 JUMPI PUSH2 0x3CE DUP4 DUP6 PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP PUSH2 0x404 JUMP JUMPDEST PUSH3 0x76A700 DUP3 LT PUSH2 0x404 JUMPI DUP3 PUSH1 0x64 PUSH2 0x3ED DUP7 PUSH1 0x32 PUSH2 0x5B7 JUMP JUMPDEST PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH2 0x401 SWAP2 SWAP1 PUSH2 0x5A4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD SUB PUSH2 0x42F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x487 SWAP1 DUP5 SWAP1 PUSH2 0x48C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x4C2 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x512 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x549 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x55F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59D JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x172 JUMPI PUSH2 0x172 PUSH2 0x566 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x5E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x56B7213BC8277A 0xF PUSH23 0x4268390558531E8D78EC4C04EEF60F4C11B849D08CD64 PUSH20 0x6F6C634300081C00330000000000000000000000 ",
							"sourceMap": "329:2862:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;824:33;;;;;;;;-1:-1:-1;;;;;192:32:11;;;174:51;;162:2;147:18;824:33:8;;;;;;;;757:60;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;613:25:11;;;601:2;586:18;757:60:8;467:177:11;863:42:8;;;;;619:50;;662:7;619:50;;687:51;;730:8;687:51;;2447:114;;;;;;:::i;:::-;;:::i;552:60::-;;602:10;552:60;;1701:740;;;;;;:::i;:::-;;:::i;:::-;;2447:114;2509:7;2535:19;2546:7;2535:10;:19::i;:::-;2528:26;2447:114;-1:-1:-1;;2447:114:8:o;1701:740::-;2500:21:6;:19;:21::i;:::-;1785:29:8::1;::::0;-1:-1:-1;;;1785:29:8;;::::1;::::0;::::1;613:25:11::0;;;1818:10:8::1;::::0;-1:-1:-1;;;;;1785:12:8::1;:20;::::0;::::1;::::0;586:18:11;;1785:29:8::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;1785:43:8::1;;1781:95;;1851:14;;-1:-1:-1::0;;;1851:14:8::1;;;;;;;;;;;1781:95;1890:6;1900:1;1890:11:::0;1886:71:::1;;1924:22;;-1:-1:-1::0;;;1924:22:8::1;;;;;;;;;;;1886:71;1967:23;1993:19;2004:7;1993:10;:19::i;:::-;1967:45;;2115:15;2106:6;:24;2102:84;;;2153:22;;-1:-1:-1::0;;;2153:22:8::1;;;;;;;;;;;2102:84;2260:34;::::0;;;:25:::1;:34;::::0;;;;:44;;2298:6;;2260:34;:44:::1;::::0;2298:6;;2260:44:::1;:::i;:::-;::::0;;;-1:-1:-1;2346:42:8::1;::::0;-1:-1:-1;;;;;;2346:9:8::1;:22;2369:10;2381:6:::0;2346:22:::1;:42::i;:::-;2404:30;::::0;2427:6;;2418:7;;2404:30:::1;::::0;;;::::1;1771:670;2542:20:6::0;1857:1;3068:7;:21;2888:208;2542:20;1701:740:8;;:::o;2567:622::-;2671:44;;-1:-1:-1;;;2671:44:8;;;;;613:25:11;;;2626:7:8;;;;-1:-1:-1;;;;;2671:12:8;:35;;;;586:18:11;;2671:44:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2726:22;2751:34;;;:25;:34;;;;;;2645:70;;-1:-1:-1;2818:41:8;602:10;2818:15;:41;:::i;:::-;2796:63;-1:-1:-1;2869:23:8;730:8;2911:31;;2907:243;;2976:32;2994:14;2976:15;:32;:::i;:::-;2958:50;;2907:243;;;662:7;3029:11;:31;3025:125;;3125:14;3119:3;3095:20;:15;3113:2;3095:20;:::i;:::-;3094:28;;;;:::i;:::-;:45;;;;:::i;:::-;3076:63;;3025:125;3167:15;2567:622;-1:-1:-1;;;;;2567:622:8:o;2575:307:6:-;1899:1;2702:7;;:18;2698:86;;2743:30;;-1:-1:-1;;;2743:30:6;;;;;;;;;;;2698:86;1899:1;2858:7;:17;2575:307::o;1219:160:4:-;1328:43;;;-1:-1:-1;;;;;2695:32:11;;1328:43:4;;;2677:51:11;2744:18;;;;2737:34;;;1328:43:4;;;;;;;;;;2650:18:11;;;;1328:43:4;;;;;;;;-1:-1:-1;;;;;1328:43:4;-1:-1:-1;;;1328:43:4;;;1301:71;;1321:5;;1301:19;:71::i;:::-;1219:160;;;:::o;7686:720::-;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:4;8226:8;8182:16;;-1:-1:-1;8258:15:4;;:68;;8310:11;8325:1;8310:16;;8258:68;;;-1:-1:-1;;;;;8276:26:4;;;:31;8258:68;8254:146;;;8349:40;;-1:-1:-1;;;8349:40:4;;-1:-1:-1;;;;;192:32:11;;8349:40:4;;;174:51:11;147:18;;8349:40:4;;;;;;;8254:146;7756:650;;7686:720;;:::o;236:226:11:-;295:6;348:2;336:9;327:7;323:23;319:32;316:52;;;364:1;361;354:12;316:52;-1:-1:-1;409:23:11;;236:226;-1:-1:-1;236:226:11:o;878:346::-;946:6;954;1007:2;995:9;986:7;982:23;978:32;975:52;;;1023:1;1020;1013:12;975:52;-1:-1:-1;;1068:23:11;;;1188:2;1173:18;;;1160:32;;-1:-1:-1;878:346:11:o;1229:290::-;1299:6;1352:2;1340:9;1331:7;1327:23;1323:32;1320:52;;;1368:1;1365;1358:12;1320:52;1394:16;;-1:-1:-1;;;;;1439:31:11;;1429:42;;1419:70;;1485:1;1482;1475:12;1419:70;1508:5;1229:290;-1:-1:-1;;;1229:290:11:o;1524:127::-;1585:10;1580:3;1576:20;1573:1;1566:31;1616:4;1613:1;1606:15;1640:4;1637:1;1630:15;1656:125;1721:9;;;1742:10;;;1739:36;;;1755:18;;:::i;1786:184::-;1856:6;1909:2;1897:9;1888:7;1884:23;1880:32;1877:52;;;1925:1;1922;1915:12;1877:52;-1:-1:-1;1948:16:11;;1786:184;-1:-1:-1;1786:184:11:o;1975:128::-;2042:9;;;2063:11;;;2060:37;;;2077:18;;:::i;2108:168::-;2181:9;;;2212;;2229:15;;;2223:22;;2209:37;2199:71;;2250:18;;:::i;2281:217::-;2321:1;2347;2337:132;;2391:10;2386:3;2382:20;2379:1;2372:31;2426:4;2423:1;2416:15;2454:4;2451:1;2444:15;2337:132;-1:-1:-1;2483:9:11;;2281:217::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "314200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"ANT_TOKEN()": "infinite",
								"AUTONOMI_NFT()": "infinite",
								"VESTING_PERIOD_1()": "261",
								"VESTING_PERIOD_2()": "194",
								"VESTING_START_TIMESTAMP()": "238",
								"claim(uint256,uint256)": "infinite",
								"getClaimable(uint256)": "infinite",
								"totalAntClaimedForTokenId(uint256)": "2458"
							},
							"internal": {
								"_claimable(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "C0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 912,
									"end": 1180,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 912,
									"end": 1180,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 2061,
									"end": 2068,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2061,
									"end": 2082,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 981,
									"end": 1012,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 981,
									"end": 1012,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 981,
									"end": 1012,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 981,
									"end": 1012,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 981,
									"end": 1050,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 981,
									"end": 1050,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1016,
									"end": 1050,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1016,
									"end": 1050,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1016,
									"end": 1050,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 981,
									"end": 1050,
									"name": "tag",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 981,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 977,
									"end": 1107,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 977,
									"end": 1107,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 977,
									"end": 1107,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "42BCDF7F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1096,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 977,
									"end": 1107,
									"name": "tag",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 977,
									"end": 1107,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1117,
									"end": 1137,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1117,
									"end": 1137,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1117,
									"end": 1137,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1117,
									"end": 1137,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 1117,
									"end": 1137,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1147,
									"end": 1173,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1147,
									"end": 1173,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 1147,
									"end": 1173,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 14,
									"end": 153,
									"name": "tag",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 14,
									"end": 153,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 97,
									"end": 128,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 97,
									"end": 128,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 87,
									"end": 129,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 87,
									"end": 129,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 77,
									"end": 147,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 77,
									"end": 147,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 143,
									"end": 144,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 140,
									"end": 141,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 145,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 77,
									"end": 147,
									"name": "tag",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 77,
									"end": 147,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 14,
									"end": 153,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 14,
									"end": 153,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 158,
									"end": 594,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 272,
									"end": 278,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 280,
									"end": 286,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 333,
									"end": 335,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 321,
									"end": 330,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 312,
									"end": 319,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 308,
									"end": 331,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 304,
									"end": 336,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 301,
									"end": 353,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 301,
									"end": 353,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 301,
									"end": 353,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 349,
									"end": 350,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 346,
									"end": 347,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 351,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 301,
									"end": 353,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 301,
									"end": 353,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 381,
									"end": 390,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 375,
									"end": 391,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 400,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 433,
									"end": 438,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 400,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 400,
									"end": 439,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 400,
									"end": 439,
									"name": "tag",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 400,
									"end": 439,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 508,
									"end": 510,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 493,
									"end": 511,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 493,
									"end": 511,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 487,
									"end": 512,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 458,
									"end": 463,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 458,
									"end": 463,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 521,
									"end": 562,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 487,
									"end": 512,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 521,
									"end": 562,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 521,
									"end": 562,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 521,
									"end": 562,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 521,
									"end": 562,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 581,
									"end": 588,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 571,
									"end": 588,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 571,
									"end": 588,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 571,
									"end": 588,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 158,
									"end": 594,
									"name": "tag",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 158,
									"end": 594,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "814"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "811"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 329,
									"end": 3191,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206656b7213bc8277a0f7604268390558531e8d78ec4c04eef60f4c11b849d08cd64736f6c634300081c0033",
									".code": [
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "7F384ACF"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "7F384ACF"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "9C7E4A66"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "BA175DFA"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "C3490263"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "2DB104B"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "170C62DC"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "317E6D23"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "4E301810"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 329,
											"end": 3191,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "811"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 192,
											"end": 224,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 192,
											"end": 224,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 192,
											"end": 224,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 174,
											"end": 225,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 174,
											"end": 225,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 162,
											"end": 164,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 147,
											"end": 165,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 824,
											"end": 857,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 824,
											"end": 857,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 824,
											"end": 857,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 757,
											"end": 817,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 757,
											"end": 817,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 613,
											"end": 638,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 601,
											"end": 603,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 586,
											"end": 604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 757,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 467,
											"end": 644,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 863,
											"end": 905,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 863,
											"end": 905,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 863,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 863,
											"end": 905,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "814"
										},
										{
											"begin": 863,
											"end": 905,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 863,
											"end": 905,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 619,
											"end": 669,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 619,
											"end": 669,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 619,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 662,
											"end": 669,
											"name": "PUSH",
											"source": 8,
											"value": "76A700"
										},
										{
											"begin": 619,
											"end": 669,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 619,
											"end": 669,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 687,
											"end": 738,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 687,
											"end": 738,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 687,
											"end": 738,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 730,
											"end": 738,
											"name": "PUSH",
											"source": 8,
											"value": "ED4E00"
										},
										{
											"begin": 687,
											"end": 738,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 687,
											"end": 738,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 2447,
											"end": 2561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 2447,
											"end": 2561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 552,
											"end": 612,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 552,
											"end": 612,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 552,
											"end": 612,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 602,
											"end": 612,
											"name": "PUSH",
											"source": 8,
											"value": "67AB57E0"
										},
										{
											"begin": 552,
											"end": 612,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 552,
											"end": 612,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1701,
											"end": 2441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1701,
											"end": 2441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "tag",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2509,
											"end": 2516,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2535,
											"end": 2554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2546,
											"end": 2553,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2535,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 2535,
											"end": 2554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2535,
											"end": 2554,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2535,
											"end": 2554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2528,
											"end": 2554,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2447,
											"end": 2561,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2447,
											"end": 2561,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2500,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 2500,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2500,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2500,
											"end": 2521,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 2500,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1785,
											"end": 1814,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "31A9108F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 1814,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1785,
											"end": 1814,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 613,
											"end": 638,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1818,
											"end": 1828,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1818,
											"end": 1828,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 1797,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "814"
										},
										{
											"begin": 1785,
											"end": 1805,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1805,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1805,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "6352211E"
										},
										{
											"begin": 1785,
											"end": 1805,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 586,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 586,
											"end": 604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 1785,
											"end": 1814,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 1785,
											"end": 1814,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 1828,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1785,
											"end": 1828,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1781,
											"end": 1876,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 1781,
											"end": 1876,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82B429"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1865,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1781,
											"end": 1876,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 1781,
											"end": 1876,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1896,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1900,
											"end": 1901,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1890,
											"end": 1901,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1886,
											"end": 1957,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 1886,
											"end": 1957,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A1CAB5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1946,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1886,
											"end": 1957,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 1886,
											"end": 1957,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1967,
											"end": 1990,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1993,
											"end": 2012,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 2004,
											"end": 2011,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1993,
											"end": 2003,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 1993,
											"end": 2012,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1993,
											"end": 2012,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 1993,
											"end": 2012,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1967,
											"end": 2012,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1967,
											"end": 2012,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2115,
											"end": 2130,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2106,
											"end": 2112,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2106,
											"end": 2130,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2102,
											"end": 2186,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2102,
											"end": 2186,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 2102,
											"end": 2186,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D89F341B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2153,
											"end": 2175,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2102,
											"end": 2186,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 2102,
											"end": 2186,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2285,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2260,
											"end": 2294,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2304,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2304,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2294,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2304,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2304,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2260,
											"end": 2304,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 2260,
											"end": 2304,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2260,
											"end": 2304,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2346,
											"end": 2388,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 2346,
											"end": 2388,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2346,
											"end": 2355,
											"modifierDepth": 1,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "811"
										},
										{
											"begin": 2346,
											"end": 2368,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2369,
											"end": 2379,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2381,
											"end": 2387,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2368,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 2346,
											"end": 2388,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2388,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 2346,
											"end": 2388,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2404,
											"end": 2434,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2434,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2427,
											"end": 2433,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2427,
											"end": 2433,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2418,
											"end": 2425,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2418,
											"end": 2425,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2404,
											"end": 2434,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "BDE2D72390AF9D0444BB1C4F938971ECB673ED26F5F57F8FA44C553FE01D0D3A"
										},
										{
											"begin": 2404,
											"end": 2434,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2404,
											"end": 2434,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2404,
											"end": 2434,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2404,
											"end": 2434,
											"modifierDepth": 1,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1771,
											"end": 2441,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2542,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 1857,
											"end": 1858,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3068,
											"end": 3075,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3068,
											"end": 3089,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2888,
											"end": 3096,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2542,
											"end": 2562,
											"name": "tag",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 2542,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1701,
											"end": 2441,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2567,
											"end": 3189,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 2567,
											"end": 3189,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FD70D177"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 613,
											"end": 638,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 613,
											"end": 638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2626,
											"end": 2633,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2626,
											"end": 2633,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2626,
											"end": 2633,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2626,
											"end": 2633,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2671,
											"end": 2683,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "814"
										},
										{
											"begin": 2671,
											"end": 2706,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2706,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2706,
											"name": "PUSH",
											"source": 8,
											"value": "FD70D177"
										},
										{
											"begin": 2671,
											"end": 2706,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 586,
											"end": 604,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 586,
											"end": 604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 2671,
											"end": 2715,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 2671,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2748,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2776,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2785,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2715,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2715,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2818,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 602,
											"end": 612,
											"name": "PUSH",
											"source": 8,
											"value": "67AB57E0"
										},
										{
											"begin": 2818,
											"end": 2833,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 2818,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 2818,
											"end": 2859,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2818,
											"end": 2859,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 2818,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2796,
											"end": 2859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2869,
											"end": 2892,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 730,
											"end": 738,
											"name": "PUSH",
											"source": 8,
											"value": "ED4E00"
										},
										{
											"begin": 2911,
											"end": 2942,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2911,
											"end": 2942,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 2994,
											"end": 3008,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2976,
											"end": 2991,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 2976,
											"end": 3008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 2907,
											"end": 3150,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 662,
											"end": 669,
											"name": "PUSH",
											"source": 8,
											"value": "76A700"
										},
										{
											"begin": 3029,
											"end": 3040,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3029,
											"end": 3060,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3025,
											"end": 3150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 3025,
											"end": 3150,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3125,
											"end": 3139,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3119,
											"end": 3122,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3095,
											"end": 3115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 3095,
											"end": 3110,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3113,
											"end": 3115,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 3095,
											"end": 3115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 3095,
											"end": 3115,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3095,
											"end": 3115,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 3095,
											"end": 3115,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3094,
											"end": 3122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 3094,
											"end": 3122,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 3094,
											"end": 3139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 3094,
											"end": 3139,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3076,
											"end": 3139,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3076,
											"end": 3139,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3025,
											"end": 3150,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 3025,
											"end": 3150,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3167,
											"end": 3182,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2567,
											"end": 3189,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2567,
											"end": 3189,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2882,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2575,
											"end": 2882,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2702,
											"end": 2709,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2702,
											"end": 2709,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2720,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3EE5AEB5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2858,
											"end": 2865,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2858,
											"end": 2875,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2575,
											"end": 2882,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2695,
											"end": 2727,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2695,
											"end": 2727,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2677,
											"end": 2728,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2771,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2771,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2771,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2650,
											"end": 2668,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2650,
											"end": 2668,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2650,
											"end": 2668,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2650,
											"end": 2668,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1321,
											"end": 1326,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1321,
											"end": 1326,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 1301,
											"end": 1372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "tag",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 1301,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1219,
											"end": 1379,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7686,
											"end": 8406,
											"name": "tag",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 7686,
											"end": 8406,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7766,
											"end": 7784,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7794,
											"end": 7813,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7932,
											"end": 7936,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7929,
											"end": 7930,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7922,
											"end": 7926,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7916,
											"end": 7927,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7909,
											"end": 7913,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7903,
											"end": 7907,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7899,
											"end": 7914,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7896,
											"end": 7897,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7889,
											"end": 7894,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 7882,
											"end": 7887,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 7877,
											"end": 7937,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 7989,
											"end": 7996,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7979,
											"end": 8155,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 7979,
											"end": 8155,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8033,
											"end": 8037,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8027,
											"end": 8038,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8078,
											"end": 8094,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8075,
											"end": 8076,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8070,
											"end": 8073,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8055,
											"end": 8095,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 8124,
											"end": 8140,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8119,
											"end": 8122,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8112,
											"end": 8141,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7979,
											"end": 8155,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 7979,
											"end": 8155,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8232,
											"end": 8233,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8226,
											"end": 8234,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8182,
											"end": 8198,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8182,
											"end": 8198,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8258,
											"end": 8273,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8258,
											"end": 8273,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8310,
											"end": 8321,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8325,
											"end": 8326,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8310,
											"end": 8326,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8310,
											"end": 8326,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "tag",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8276,
											"end": 8302,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8276,
											"end": 8302,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8276,
											"end": 8302,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 8276,
											"end": 8307,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "tag",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 8258,
											"end": 8326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8254,
											"end": 8400,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8254,
											"end": 8400,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8254,
											"end": 8400,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 192,
											"end": 224,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 192,
											"end": 224,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 174,
											"end": 225,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 147,
											"end": 165,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 147,
											"end": 165,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8349,
											"end": 8389,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8254,
											"end": 8400,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8254,
											"end": 8400,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7756,
											"end": 8406,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7756,
											"end": 8406,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7686,
											"end": 8406,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7686,
											"end": 8406,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7686,
											"end": 8406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 236,
											"end": 462,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 236,
											"end": 462,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 295,
											"end": 301,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 350,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 345,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 327,
											"end": 334,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 323,
											"end": 346,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 319,
											"end": 351,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 316,
											"end": 368,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 316,
											"end": 368,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 316,
											"end": 368,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 364,
											"end": 365,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 361,
											"end": 362,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 354,
											"end": 366,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 316,
											"end": 368,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 316,
											"end": 368,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 409,
											"end": 432,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 409,
											"end": 432,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 236,
											"end": 462,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 236,
											"end": 462,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 878,
											"end": 1224,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 878,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 946,
											"end": 952,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 954,
											"end": 960,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1007,
											"end": 1009,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 995,
											"end": 1004,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 986,
											"end": 993,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1005,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 978,
											"end": 1010,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 975,
											"end": 1027,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 975,
											"end": 1027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 975,
											"end": 1027,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1023,
											"end": 1024,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1020,
											"end": 1021,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1013,
											"end": 1025,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 975,
											"end": 1027,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 975,
											"end": 1027,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1068,
											"end": 1091,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1068,
											"end": 1091,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1068,
											"end": 1091,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1188,
											"end": 1190,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1160,
											"end": 1192,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1160,
											"end": 1192,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 878,
											"end": 1224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1229,
											"end": 1519,
											"name": "tag",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 1229,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1299,
											"end": 1305,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1352,
											"end": 1354,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1340,
											"end": 1349,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1331,
											"end": 1338,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1327,
											"end": 1350,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1323,
											"end": 1355,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1320,
											"end": 1372,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1320,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1320,
											"end": 1372,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1368,
											"end": 1369,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1358,
											"end": 1370,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1320,
											"end": 1372,
											"name": "tag",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1320,
											"end": 1372,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1410,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1394,
											"end": 1410,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1439,
											"end": 1470,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1439,
											"end": 1470,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1471,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1471,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1419,
											"end": 1489,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 1419,
											"end": 1489,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1485,
											"end": 1486,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1487,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1419,
											"end": 1489,
											"name": "tag",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 1419,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1508,
											"end": 1513,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1229,
											"end": 1519,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1229,
											"end": 1519,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1524,
											"end": 1651,
											"name": "tag",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1524,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1585,
											"end": 1595,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 1580,
											"end": 1583,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1576,
											"end": 1596,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 1573,
											"end": 1574,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1566,
											"end": 1597,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1616,
											"end": 1620,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 1613,
											"end": 1614,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1606,
											"end": 1621,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1640,
											"end": 1644,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 1637,
											"end": 1638,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1630,
											"end": 1645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1656,
											"end": 1781,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1656,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1730,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1730,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1730,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1752,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1752,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1752,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1739,
											"end": 1775,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1739,
											"end": 1775,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 1739,
											"end": 1775,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1773,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 1755,
											"end": 1773,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1755,
											"end": 1773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1786,
											"end": 1970,
											"name": "tag",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 1786,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1856,
											"end": 1862,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1897,
											"end": 1906,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1888,
											"end": 1895,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1884,
											"end": 1907,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1880,
											"end": 1912,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1877,
											"end": 1929,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1877,
											"end": 1929,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 1877,
											"end": 1929,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1925,
											"end": 1926,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1915,
											"end": 1927,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1877,
											"end": 1929,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 1877,
											"end": 1929,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1948,
											"end": 1964,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1948,
											"end": 1964,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1786,
											"end": 1970,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1786,
											"end": 1970,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1975,
											"end": 2103,
											"name": "tag",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 1975,
											"end": 2103,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2042,
											"end": 2051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2042,
											"end": 2051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2042,
											"end": 2051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2063,
											"end": 2074,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2063,
											"end": 2074,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2063,
											"end": 2074,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2060,
											"end": 2097,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2060,
											"end": 2097,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2060,
											"end": 2097,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2077,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2077,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 2077,
											"end": 2095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2108,
											"end": 2276,
											"name": "tag",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 2108,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2181,
											"end": 2190,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2181,
											"end": 2190,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2181,
											"end": 2190,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2221,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2221,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2229,
											"end": 2244,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2229,
											"end": 2244,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2229,
											"end": 2244,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2223,
											"end": 2245,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2223,
											"end": 2245,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 2209,
											"end": 2246,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2199,
											"end": 2270,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2199,
											"end": 2270,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2250,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2250,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 2250,
											"end": 2268,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2281,
											"end": 2498,
											"name": "tag",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 2281,
											"end": 2498,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2322,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2347,
											"end": 2348,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2337,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "122"
										},
										{
											"begin": 2337,
											"end": 2469,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2391,
											"end": 2401,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 2386,
											"end": 2389,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 2382,
											"end": 2402,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 2379,
											"end": 2380,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2372,
											"end": 2403,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2426,
											"end": 2430,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 2423,
											"end": 2424,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2416,
											"end": 2431,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2454,
											"end": 2458,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 2451,
											"end": 2452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2444,
											"end": 2459,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2337,
											"end": 2469,
											"name": "tag",
											"source": 11,
											"value": "122"
										},
										{
											"begin": 2337,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2483,
											"end": 2492,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2483,
											"end": 2492,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2281,
											"end": 2498,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
								"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"src/Claims.sol",
								"src/IAutonomiNFT.sol",
								"src/IClaims.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"ANT_TOKEN()": "02db104b",
							"AUTONOMI_NFT()": "317e6d23",
							"VESTING_PERIOD_1()": "4e301810",
							"VESTING_PERIOD_2()": "7f384acf",
							"VESTING_START_TIMESTAMP()": "ba175dfa",
							"claim(uint256,uint256)": "c3490263",
							"getClaimable(uint256)": "9c7e4a66",
							"totalAntClaimedForTokenId(uint256)": "170c62dc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"antToken\",\"type\":\"address\"},{\"internalType\":\"contract IAutonomiNFT\",\"name\":\"autonomiNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TryingToClaimTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANT_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTONOMI_NFT\",\"outputs\":[{\"internalType\":\"contract IAutonomiNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_PERIOD_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_PERIOD_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_START_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAntClaimedForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"claim(uint256,uint256)\":{\"details\":\"The total claimable amount is unlocked during a period of 6 months, with the 50% unlocked after 3 months, and the rest after 6 months. Autonomi NFT holders can claim any amount less than or equal to the unlocked amount, minus the amount they already claimed. The amount claimed should never be more than the total allocation to that NFT. NFT holders should be able to claim all their allocated ANT tokens after the 6 month vesting periods have passed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Claims.sol\":\"Claims\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329\",\"dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11\",\"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"src/Claims.sol\":{\"keccak256\":\"0x23fe2381917fb5acdb4bb32f83246d6730c9d7bf8c049dc4f551ccfa5f037203\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0ec4269f7877558d78b6c90758996b8ba27b1cd155f86cf72c3df692c051c5b\",\"dweb:/ipfs/QmRm3SmRffC1ktS4mRaddCotQUkH9AH2QhhneDaBqJJJds\"]},\"src/IAutonomiNFT.sol\":{\"keccak256\":\"0x4895439df7ef1218a629861a917be9232b9e9a232655dd7f891c2cc8873bd8cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82990cfe7fd8a92b03c430bb6678a4a3258b7e2125abccf5bc56b4f9145141d6\",\"dweb:/ipfs/QmYYxgBZH4M93knrPX96gZwNqqZuPA7toKTrccMaGkMpxQ\"]},\"src/IClaims.sol\":{\"keccak256\":\"0x2a8838009c8dd70e6a05027db8c91f888f06b76833d8a45cb43769f2e0806d18\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb7b0e7ccbb77179ec50284388579806f4a1c5fb19a0e82e277bebdd77ade42\",\"dweb:/ipfs/QmNMPd3pXbQ1R3dyA5AQjYLLGaPmYxxMB2jnSQM8nd45QW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 704,
								"contract": "src/Claims.sol:Claims",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 808,
								"contract": "src/Claims.sol:Claims",
								"label": "totalAntClaimedForTokenId",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_uint256)"
							}
						],
						"types": {
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/IAutonomiNFT.sol": {
				"IAutonomiNFT": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenIdToAntAllocation",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenIdToAntAllocation(uint256)": "fd70d177",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAntAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IAutonomiNFT.sol\":\"IAutonomiNFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11\",\"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"src/IAutonomiNFT.sol\":{\"keccak256\":\"0x4895439df7ef1218a629861a917be9232b9e9a232655dd7f891c2cc8873bd8cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82990cfe7fd8a92b03c430bb6678a4a3258b7e2125abccf5bc56b4f9145141d6\",\"dweb:/ipfs/QmYYxgBZH4M93knrPX96gZwNqqZuPA7toKTrccMaGkMpxQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/IClaims.sol": {
				"IClaims": {
					"abi": [
						{
							"inputs": [],
							"name": "TryingToClaimTooMuch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Unauthorized",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokensClaimed",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"claim(uint256,uint256)": "c3490263"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TryingToClaimTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IClaims.sol\":\"IClaims\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/\"]},\"sources\":{\"src/IClaims.sol\":{\"keccak256\":\"0x2a8838009c8dd70e6a05027db8c91f888f06b76833d8a45cb43769f2e0806d18\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb7b0e7ccbb77179ec50284388579806f4a1c5fb19a0e82e277bebdd77ade42\",\"dweb:/ipfs/QmNMPd3pXbQ1R3dyA5AQjYLLGaPmYxxMB2jnSQM8nd45QW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC165": [
							774
						],
						"IERC20": [
							167
						]
					},
					"id": 82,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 90,
							"src": "133:36:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 86,
							"src": "170:38:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 774,
										"src": "178:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"590:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 167,
										"src": "590:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC165",
										"nameLocations": [
											"598:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 774,
										"src": "598:7:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:0"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:0",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 81,
							"linearizedBaseContracts": [
								81,
								774,
								167
							],
							"name": "IERC1363",
							"nameLocation": "578:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1548:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1560:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1593:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 17,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:0"
									},
									"scope": 81,
									"src": "1523:76:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2088:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2100:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2115:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 26,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2154:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:0"
									},
									"scope": 81,
									"src": "2063:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2653:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2667:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2679:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2712:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:0"
									},
									"scope": 81,
									"src": "2624:94:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3294:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3308:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3320:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3335:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 52,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3374:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:0"
									},
									"scope": 81,
									"src": "3265:115:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3805:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3822:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3855:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 65,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:0"
									},
									"scope": 81,
									"src": "3781:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4374:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4391:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4406:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4445:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 77,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:0"
									},
									"scope": 81,
									"src": "4350:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 82,
							"src": "568:3885:0",
							"usedErrors": [],
							"usedEvents": [
								101,
								110
							]
						}
					],
					"src": "107:4347:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							774
						]
					},
					"id": 86,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 83,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:1"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 85,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 86,
							"sourceUnit": 775,
							"src": "132:59:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 84,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 774,
										"src": "140:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:86:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 90,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 87,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 89,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 90,
							"sourceUnit": 168,
							"src": "131:49:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 88,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:76:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 168,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 91,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 92,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:3",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 167,
							"linearizedBaseContracts": [
								167
							],
							"name": "IERC20",
							"nameLocation": "214:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 101,
									"name": "Transfer",
									"nameLocation": "396:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "405:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "427:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "447:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:3"
									},
									"src": "390:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 110,
									"name": "Approval",
									"nameLocation": "627:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "636:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "659:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "684:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:3"
									},
									"src": "621:78:3"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:3"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "821:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:3"
									},
									"scope": 167,
									"src": "775:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 167,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1222:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1234:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:3"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1267:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 131,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:3"
									},
									"scope": 167,
									"src": "1204:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1567:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1582:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:3"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1622:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:3"
									},
									"scope": 167,
									"src": "1548:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2326:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2343:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:3"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2376:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 151,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:3"
									},
									"scope": 167,
									"src": "2309:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2712:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2726:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2738:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:3"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2771:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 163,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:3"
									},
									"scope": 167,
									"src": "2690:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 168,
							"src": "204:2575:3",
							"usedErrors": [],
							"usedEvents": [
								101,
								110
							]
						}
					],
					"src": "106:2674:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC20": [
							167
						],
						"SafeERC20": [
							576
						]
					},
					"id": 577,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 169,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:4"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 577,
							"sourceUnit": 168,
							"src": "141:37:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 170,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "149:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 173,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 577,
							"sourceUnit": 82,
							"src": "179:58:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 172,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 81,
										"src": "187:8:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 174,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 576,
							"linearizedBaseContracts": [
								576
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:4",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 179,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "823:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:4"
									},
									"src": "792:46:4"
								},
								{
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:4",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 188,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "959:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "976:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1002:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:4"
									},
									"src": "920:109:4"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "1291:88:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 200,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 192,
															"src": "1321:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 203,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 192,
																		"src": "1343:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 204,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:4",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 134,
																	"src": "1343:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 205,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 194,
																			"src": "1360:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 206,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 196,
																			"src": "1364:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 207,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 201,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 199,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "1301:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:4"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:4",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1241:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 191,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 190,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1241:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1241:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1255:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1267:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:4"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:4"
									},
									"scope": 576,
									"src": "1219:160:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "1708:98:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 226,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "1738:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 229,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 216,
																		"src": "1760:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:4",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 166,
																	"src": "1760:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 231,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 218,
																			"src": "1781:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 232,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 220,
																			"src": "1787:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 233,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "1791:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 234,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 227,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 228,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 225,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "1718:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:4"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:4",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1644:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 215,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 214,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1644:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1644:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1658:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1672:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1684:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:4"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:4"
									},
									"scope": 576,
									"src": "1618:188:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 269,
										"nodeType": "Block",
										"src": "2548:139:4",
										"statements": [
											{
												"assignments": [
													251
												],
												"declarations": [
													{
														"constant": false,
														"id": 251,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2566:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 269,
														"src": "2558:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 250,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2558:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 260,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 256,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2605:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$576",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$576",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2597:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 254,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2597:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2597:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 258,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "2612:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 252,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "2581:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														"id": 253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2587:9:4",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 144,
														"src": "2581:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2581:39:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2558:62:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 262,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "2643:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 263,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "2650:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 264,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 251,
																"src": "2659:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 265,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 247,
																"src": "2674:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2659:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 261,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "2630:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2630:50:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 268,
												"nodeType": "ExpressionStatement",
												"src": "2630:50:4"
											}
										]
									},
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "1812:645:4",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2471:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2500:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "2493:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 242,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 241,
														"name": "IERC20",
														"nameLocations": [
															"2493:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "2493:6:4"
													},
													"referencedDeclaration": 167,
													"src": "2493:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2515:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "2507:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2507:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2532:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "2524:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2524:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2492:46:4"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2548:0:4"
									},
									"scope": 576,
									"src": "2462:225:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 312,
										"nodeType": "Block",
										"src": "3453:370:4",
										"statements": [
											{
												"id": 311,
												"nodeType": "UncheckedBlock",
												"src": "3463:354:4",
												"statements": [
													{
														"assignments": [
															282
														],
														"declarations": [
															{
																"constant": false,
																"id": 282,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "3495:16:4",
																"nodeType": "VariableDeclaration",
																"scope": 311,
																"src": "3487:24:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 281,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3487:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 291,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 287,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3538:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$576",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$576",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3530:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 285,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3530:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 288,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3530:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 289,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "3545:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 283,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 274,
																	"src": "3514:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3520:9:4",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 144,
																"src": "3514:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3514:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3487:66:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 292,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 282,
																"src": "3571:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 293,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 278,
																"src": "3590:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3571:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 302,
														"nodeType": "IfStatement",
														"src": "3567:160:4",
														"trueBody": {
															"id": 301,
															"nodeType": "Block",
															"src": "3609:118:4",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 296,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 276,
																				"src": "3667:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 297,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 282,
																				"src": "3676:16:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 298,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 278,
																				"src": "3694:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 295,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 188,
																			"src": "3634:32:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3634:78:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 300,
																	"nodeType": "RevertStatement",
																	"src": "3627:85:4"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 304,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 274,
																	"src": "3753:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 305,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "3760:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 308,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 306,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 282,
																		"src": "3769:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 307,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 278,
																		"src": "3788:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3769:36:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 303,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 360,
																"src": "3740:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3740:66:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 310,
														"nodeType": "ExpressionStatement",
														"src": "3740:66:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 271,
										"nodeType": "StructuredDocumentation",
										"src": "2693:657:4",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3364:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3393:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3386:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 273,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 272,
														"name": "IERC20",
														"nameLocations": [
															"3386:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "3386:6:4"
													},
													"referencedDeclaration": 167,
													"src": "3386:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3408:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3400:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3400:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "3425:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3417:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3417:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3385:58:4"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3453:0:4"
									},
									"scope": 576,
									"src": "3355:468:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 359,
										"nodeType": "Block",
										"src": "4477:303:4",
										"statements": [
											{
												"assignments": [
													325
												],
												"declarations": [
													{
														"constant": false,
														"id": 325,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4500:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "4487:25:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 324,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4487:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 334,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 328,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "4530:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															"id": 329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4536:7:4",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 154,
															"src": "4530:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 330,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "4546:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 331,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "4555:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 332,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4545:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 326,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4515:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4519:10:4",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "4515:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4515:47:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4487:75:4"
											},
											{
												"condition": {
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4577:45:4",
													"subExpression": {
														"arguments": [
															{
																"id": 336,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "4602:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 337,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "4609:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 335,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "4578:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4578:44:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "4573:201:4",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "4624:150:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 341,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 317,
																		"src": "4658:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 344,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 317,
																					"src": "4680:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$167",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 345,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4686:7:4",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 154,
																				"src": "4680:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 346,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 319,
																						"src": "4696:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 347,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4705:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 348,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4695:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 342,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4665:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4669:10:4",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "4665:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4665:43:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 340,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "4638:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4638:71:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 351,
															"nodeType": "ExpressionStatement",
															"src": "4638:71:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 353,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 317,
																		"src": "4743:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 354,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 325,
																		"src": "4750:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 352,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "4723:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4723:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 356,
															"nodeType": "ExpressionStatement",
															"src": "4723:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "3829:566:4",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "4409:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4429:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "4422:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 316,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 315,
														"name": "IERC20",
														"nameLocations": [
															"4422:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "4422:6:4"
													},
													"referencedDeclaration": 167,
													"src": "4422:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4444:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "4436:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4436:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4461:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "4453:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4453:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4421:46:4"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4477:0:4"
									},
									"scope": 576,
									"src": "4400:380:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "5227:219:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 373,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "5241:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5244:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5241:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 375,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5249:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5241:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 376,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5259:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5241:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "5327:39:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 387,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "5350:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 388,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 368,
																	"src": "5354:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 389,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "5361:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 385,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "5328:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 386,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5334:15:4",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 32,
																"src": "5328:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5328:38:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 400,
													"nodeType": "IfStatement",
													"src": "5323:117:4",
													"trueBody": {
														"id": 399,
														"nodeType": "Block",
														"src": "5368:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 395,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 364,
																					"src": "5422:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 394,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5414:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 393,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "5414:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5414:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 392,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "5389:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5389:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 398,
																"nodeType": "RevertStatement",
																"src": "5382:47:4"
															}
														]
													}
												},
												"id": 401,
												"nodeType": "IfStatement",
												"src": "5237:203:4",
												"trueBody": {
													"id": 384,
													"nodeType": "Block",
													"src": "5262:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 379,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 364,
																		"src": "5289:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 380,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "5296:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 381,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "5300:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 378,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 212,
																	"src": "5276:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 382,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5276:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 383,
															"nodeType": "ExpressionStatement",
															"src": "5276:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "4786:333:4",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5133:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5165:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "5156:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 363,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 362,
														"name": "IERC1363",
														"nameLocations": [
															"5156:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5156:8:4"
													},
													"referencedDeclaration": 81,
													"src": "5156:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5180:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "5172:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5172:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5192:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "5184:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5184:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5212:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "5199:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 369,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5199:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5155:62:4"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5227:0:4"
									},
									"scope": 576,
									"src": "5124:322:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "5965:239:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 418,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 411,
																"src": "5979:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5982:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5979:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 420,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5987:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5979:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 421,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5997:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5979:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 438,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6075:49:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 433,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "6102:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 434,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "6108:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 435,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 413,
																	"src": "6112:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 436,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 415,
																	"src": "6119:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 431,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "6076:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6082:19:4",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 58,
																"src": "6076:25:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6076:48:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 447,
													"nodeType": "IfStatement",
													"src": "6071:127:4",
													"trueBody": {
														"id": 446,
														"nodeType": "Block",
														"src": "6126:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 442,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 407,
																					"src": "6180:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 441,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6172:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 440,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6172:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 443,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6172:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 439,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "6147:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6147:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 445,
																"nodeType": "RevertStatement",
																"src": "6140:47:4"
															}
														]
													}
												},
												"id": 448,
												"nodeType": "IfStatement",
												"src": "5975:223:4",
												"trueBody": {
													"id": 430,
													"nodeType": "Block",
													"src": "6000:65:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 424,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 407,
																		"src": "6031:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 425,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 409,
																		"src": "6038:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 426,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 411,
																		"src": "6044:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 427,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "6048:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 423,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "6014:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 428,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6014:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 429,
															"nodeType": "ExpressionStatement",
															"src": "6014:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "5452:341:4",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "5807:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5852:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "5843:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 406,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 405,
														"name": "IERC1363",
														"nameLocations": [
															"5843:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5843:8:4"
													},
													"referencedDeclaration": 81,
													"src": "5843:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5875:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "5867:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5867:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5897:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "5889:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5889:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5917:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "5909:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5909:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5945:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "5932:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 414,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5932:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5833:122:4"
									},
									"returnParameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5965:0:4"
									},
									"scope": 576,
									"src": "5798:406:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "6971:218:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 463,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 456,
																"src": "6985:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6988:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6985:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6993:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6985:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 466,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7003:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6985:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 481,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7071:38:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 477,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 456,
																	"src": "7093:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 478,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 458,
																	"src": "7097:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 479,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 460,
																	"src": "7104:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 475,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 454,
																	"src": "7072:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7078:14:4",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 80,
																"src": "7072:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7072:37:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 490,
													"nodeType": "IfStatement",
													"src": "7067:116:4",
													"trueBody": {
														"id": 489,
														"nodeType": "Block",
														"src": "7111:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 485,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 454,
																					"src": "7165:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 484,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7157:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 483,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7157:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7157:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 482,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 179,
																		"src": "7132:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7132:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 488,
																"nodeType": "RevertStatement",
																"src": "7125:47:4"
															}
														]
													}
												},
												"id": 491,
												"nodeType": "IfStatement",
												"src": "6981:202:4",
												"trueBody": {
													"id": 474,
													"nodeType": "Block",
													"src": "7006:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 469,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 454,
																		"src": "7033:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 470,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 456,
																		"src": "7040:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 471,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 458,
																		"src": "7044:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 468,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "7020:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7020:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 473,
															"nodeType": "ExpressionStatement",
															"src": "7020:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "6210:654:4",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "6878:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6909:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6900:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 453,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 452,
														"name": "IERC1363",
														"nameLocations": [
															"6900:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "6900:8:4"
													},
													"referencedDeclaration": 81,
													"src": "6900:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6924:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6916:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 455,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6916:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6936:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6928:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6928:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6956:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "6943:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 459,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6943:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6899:62:4"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6971:0:4"
									},
									"scope": 576,
									"src": "6869:320:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 533,
										"nodeType": "Block",
										"src": "7756:650:4",
										"statements": [
											{
												"assignments": [
													503
												],
												"declarations": [
													{
														"constant": false,
														"id": 503,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "7774:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 533,
														"src": "7766:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 502,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7766:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"nodeType": "VariableDeclarationStatement",
												"src": "7766:18:4"
											},
											{
												"assignments": [
													506
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "7802:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 533,
														"src": "7794:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 505,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7794:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 507,
												"nodeType": "VariableDeclarationStatement",
												"src": "7794:19:4"
											},
											{
												"AST": {
													"nativeSrc": "7848:396:4",
													"nodeType": "YulBlock",
													"src": "7848:396:4",
													"statements": [
														{
															"nativeSrc": "7862:75:4",
															"nodeType": "YulVariableDeclaration",
															"src": "7862:75:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "7882:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "7882:3:4"
																		},
																		"nativeSrc": "7882:5:4",
																		"nodeType": "YulFunctionCall",
																		"src": "7882:5:4"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "7889:5:4",
																		"nodeType": "YulIdentifier",
																		"src": "7889:5:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7896:1:4",
																		"nodeType": "YulLiteral",
																		"src": "7896:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "7903:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "7903:4:4"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7909:4:4",
																				"nodeType": "YulLiteral",
																				"src": "7909:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7899:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "7899:3:4"
																		},
																		"nativeSrc": "7899:15:4",
																		"nodeType": "YulFunctionCall",
																		"src": "7899:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "7922:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "7922:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "7916:5:4",
																			"nodeType": "YulIdentifier",
																			"src": "7916:5:4"
																		},
																		"nativeSrc": "7916:11:4",
																		"nodeType": "YulFunctionCall",
																		"src": "7916:11:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7929:1:4",
																		"nodeType": "YulLiteral",
																		"src": "7929:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7932:4:4",
																		"nodeType": "YulLiteral",
																		"src": "7932:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "7877:4:4",
																	"nodeType": "YulIdentifier",
																	"src": "7877:4:4"
																},
																"nativeSrc": "7877:60:4",
																"nodeType": "YulFunctionCall",
																"src": "7877:60:4"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "7866:7:4",
																	"nodeType": "YulTypedName",
																	"src": "7866:7:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7998:157:4",
																"nodeType": "YulBlock",
																"src": "7998:157:4",
																"statements": [
																	{
																		"nativeSrc": "8016:22:4",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8016:22:4",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8033:4:4",
																					"nodeType": "YulLiteral",
																					"src": "8033:4:4",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8027:5:4",
																				"nodeType": "YulIdentifier",
																				"src": "8027:5:4"
																			},
																			"nativeSrc": "8027:11:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8027:11:4"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8020:3:4",
																				"nodeType": "YulTypedName",
																				"src": "8020:3:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8070:3:4",
																					"nodeType": "YulIdentifier",
																					"src": "8070:3:4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8075:1:4",
																					"nodeType": "YulLiteral",
																					"src": "8075:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8078:14:4",
																						"nodeType": "YulIdentifier",
																						"src": "8078:14:4"
																					},
																					"nativeSrc": "8078:16:4",
																					"nodeType": "YulFunctionCall",
																					"src": "8078:16:4"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8055:14:4",
																				"nodeType": "YulIdentifier",
																				"src": "8055:14:4"
																			},
																			"nativeSrc": "8055:40:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8055:40:4"
																		},
																		"nativeSrc": "8055:40:4",
																		"nodeType": "YulExpressionStatement",
																		"src": "8055:40:4"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8119:3:4",
																					"nodeType": "YulIdentifier",
																					"src": "8119:3:4"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8124:14:4",
																						"nodeType": "YulIdentifier",
																						"src": "8124:14:4"
																					},
																					"nativeSrc": "8124:16:4",
																					"nodeType": "YulFunctionCall",
																					"src": "8124:16:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8112:6:4",
																				"nodeType": "YulIdentifier",
																				"src": "8112:6:4"
																			},
																			"nativeSrc": "8112:29:4",
																			"nodeType": "YulFunctionCall",
																			"src": "8112:29:4"
																		},
																		"nativeSrc": "8112:29:4",
																		"nodeType": "YulExpressionStatement",
																		"src": "8112:29:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "7989:7:4",
																		"nodeType": "YulIdentifier",
																		"src": "7989:7:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7982:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "7982:6:4"
																},
																"nativeSrc": "7982:15:4",
																"nodeType": "YulFunctionCall",
																"src": "7982:15:4"
															},
															"nativeSrc": "7979:176:4",
															"nodeType": "YulIf",
															"src": "7979:176:4"
														},
														{
															"nativeSrc": "8168:30:4",
															"nodeType": "YulAssignment",
															"src": "8168:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8182:14:4",
																	"nodeType": "YulIdentifier",
																	"src": "8182:14:4"
																},
																"nativeSrc": "8182:16:4",
																"nodeType": "YulFunctionCall",
																"src": "8182:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8168:10:4",
																	"nodeType": "YulIdentifier",
																	"src": "8168:10:4"
																}
															]
														},
														{
															"nativeSrc": "8211:23:4",
															"nodeType": "YulAssignment",
															"src": "8211:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8232:1:4",
																		"nodeType": "YulLiteral",
																		"src": "8232:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8226:5:4",
																	"nodeType": "YulIdentifier",
																	"src": "8226:5:4"
																},
																"nativeSrc": "8226:8:4",
																"nodeType": "YulFunctionCall",
																"src": "8226:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8211:11:4",
																	"nodeType": "YulIdentifier",
																	"src": "8211:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 499,
														"isOffset": false,
														"isSlot": false,
														"src": "7903:4:4",
														"valueSize": 1
													},
													{
														"declaration": 499,
														"isOffset": false,
														"isSlot": false,
														"src": "7922:4:4",
														"valueSize": 1
													},
													{
														"declaration": 503,
														"isOffset": false,
														"isSlot": false,
														"src": "8168:10:4",
														"valueSize": 1
													},
													{
														"declaration": 506,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:11:4",
														"valueSize": 1
													},
													{
														"declaration": 497,
														"isOffset": false,
														"isSlot": false,
														"src": "7889:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 508,
												"nodeType": "InlineAssembly",
												"src": "7823:421:4"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 509,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "8258:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8272:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8258:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 520,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "8310:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8325:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8310:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8258:68:4",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 519,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 514,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 497,
																			"src": "8284:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8276:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 512,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8276:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8276:14:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8291:4:4",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8276:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8296:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8276:26:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8306:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8276:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 532,
												"nodeType": "IfStatement",
												"src": "8254:146:4",
												"trueBody": {
													"id": 531,
													"nodeType": "Block",
													"src": "8328:72:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 527,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 497,
																				"src": "8382:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 526,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8374:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 525,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8374:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8374:14:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 524,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "8349:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8349:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 530,
															"nodeType": "RevertStatement",
															"src": "8342:47:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "7195:486:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "7695:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7722:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "7715:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 496,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 495,
														"name": "IERC20",
														"nameLocations": [
															"7715:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "7715:6:4"
													},
													"referencedDeclaration": 167,
													"src": "7715:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7742:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "7729:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 498,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7729:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7714:33:4"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7756:0:4"
									},
									"scope": 576,
									"src": "7686:720:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 574,
										"nodeType": "Block",
										"src": "8997:391:4",
										"statements": [
											{
												"assignments": [
													546
												],
												"declarations": [
													{
														"constant": false,
														"id": 546,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9012:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 574,
														"src": "9007:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 545,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9007:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 547,
												"nodeType": "VariableDeclarationStatement",
												"src": "9007:12:4"
											},
											{
												"assignments": [
													549
												],
												"declarations": [
													{
														"constant": false,
														"id": 549,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9037:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 574,
														"src": "9029:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 548,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9029:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 550,
												"nodeType": "VariableDeclarationStatement",
												"src": "9029:18:4"
											},
											{
												"assignments": [
													552
												],
												"declarations": [
													{
														"constant": false,
														"id": 552,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9065:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 574,
														"src": "9057:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 551,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9057:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 553,
												"nodeType": "VariableDeclarationStatement",
												"src": "9057:19:4"
											},
											{
												"AST": {
													"nativeSrc": "9111:174:4",
													"nodeType": "YulBlock",
													"src": "9111:174:4",
													"statements": [
														{
															"nativeSrc": "9125:71:4",
															"nodeType": "YulAssignment",
															"src": "9125:71:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9141:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "9141:3:4"
																		},
																		"nativeSrc": "9141:5:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9141:5:4"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9148:5:4",
																		"nodeType": "YulIdentifier",
																		"src": "9148:5:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9155:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9155:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9162:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "9162:4:4"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9168:4:4",
																				"nodeType": "YulLiteral",
																				"src": "9168:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9158:3:4",
																			"nodeType": "YulIdentifier",
																			"src": "9158:3:4"
																		},
																		"nativeSrc": "9158:15:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9158:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9181:4:4",
																				"nodeType": "YulIdentifier",
																				"src": "9181:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9175:5:4",
																			"nodeType": "YulIdentifier",
																			"src": "9175:5:4"
																		},
																		"nativeSrc": "9175:11:4",
																		"nodeType": "YulFunctionCall",
																		"src": "9175:11:4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9188:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9188:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9191:4:4",
																		"nodeType": "YulLiteral",
																		"src": "9191:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9136:4:4",
																	"nodeType": "YulIdentifier",
																	"src": "9136:4:4"
																},
																"nativeSrc": "9136:60:4",
																"nodeType": "YulFunctionCall",
																"src": "9136:60:4"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9125:7:4",
																	"nodeType": "YulIdentifier",
																	"src": "9125:7:4"
																}
															]
														},
														{
															"nativeSrc": "9209:30:4",
															"nodeType": "YulAssignment",
															"src": "9209:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9223:14:4",
																	"nodeType": "YulIdentifier",
																	"src": "9223:14:4"
																},
																"nativeSrc": "9223:16:4",
																"nodeType": "YulFunctionCall",
																"src": "9223:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9209:10:4",
																	"nodeType": "YulIdentifier",
																	"src": "9209:10:4"
																}
															]
														},
														{
															"nativeSrc": "9252:23:4",
															"nodeType": "YulAssignment",
															"src": "9252:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9273:1:4",
																		"nodeType": "YulLiteral",
																		"src": "9273:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9267:5:4",
																	"nodeType": "YulIdentifier",
																	"src": "9267:5:4"
																},
																"nativeSrc": "9267:8:4",
																"nodeType": "YulFunctionCall",
																"src": "9267:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9252:11:4",
																	"nodeType": "YulIdentifier",
																	"src": "9252:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "9162:4:4",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "9181:4:4",
														"valueSize": 1
													},
													{
														"declaration": 549,
														"isOffset": false,
														"isSlot": false,
														"src": "9209:10:4",
														"valueSize": 1
													},
													{
														"declaration": 552,
														"isOffset": false,
														"isSlot": false,
														"src": "9252:11:4",
														"valueSize": 1
													},
													{
														"declaration": 546,
														"isOffset": false,
														"isSlot": false,
														"src": "9125:7:4",
														"valueSize": 1
													},
													{
														"declaration": 538,
														"isOffset": false,
														"isSlot": false,
														"src": "9148:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 554,
												"nodeType": "InlineAssembly",
												"src": "9086:199:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 555,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "9301:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 558,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 556,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "9313:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9327:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9313:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 569,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 567,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 552,
																		"src": "9364:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9379:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "9364:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9313:67:4",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 561,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 538,
																						"src": "9339:5:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 560,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "9331:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 559,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "9331:7:4",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 562,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "9331:14:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "9346:4:4",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "9331:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9351:6:4",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "9331:26:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9360:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9331:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 571,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9312:69:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9301:80:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 544,
												"id": 573,
												"nodeType": "Return",
												"src": "9294:87:4"
											}
										]
									},
									"documentation": {
										"id": 535,
										"nodeType": "StructuredDocumentation",
										"src": "8412:491:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "8917:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8948:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "8941:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 537,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 536,
														"name": "IERC20",
														"nameLocations": [
															"8941:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "8941:6:4"
													},
													"referencedDeclaration": 167,
													"src": "8941:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8968:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "8955:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8940:33:4"
									},
									"returnParameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "8991:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 542,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8991:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8990:6:4"
									},
									"scope": 576,
									"src": "8908:480:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 577,
							"src": "698:8692:4",
							"usedErrors": [
								179,
								188
							],
							"usedEvents": []
						}
					],
					"src": "115:9276:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							774
						],
						"IERC721": [
							693
						]
					},
					"id": 694,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 578,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:5"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 580,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 694,
							"sourceUnit": 775,
							"src": "134:62:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 579,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 774,
										"src": "142:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 582,
										"name": "IERC165",
										"nameLocations": [
											"288:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 774,
										"src": "288:7:5"
									},
									"id": 583,
									"nodeType": "InheritanceSpecifier",
									"src": "288:7:5"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 581,
								"nodeType": "StructuredDocumentation",
								"src": "198:68:5",
								"text": " @dev Required interface of an ERC-721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 693,
							"linearizedBaseContracts": [
								693,
								774
							],
							"name": "IERC721",
							"nameLocation": "277:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "302:88:5",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 592,
									"name": "Transfer",
									"nameLocation": "401:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "426:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "410:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 588,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "448:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "432:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "468:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "452:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "452:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:67:5"
									},
									"src": "395:82:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "483:94:5",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 601,
									"name": "Approval",
									"nameLocation": "588:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "613:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "597:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "597:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 597,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "636:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "620:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "620:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 599,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "662:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "646:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "596:74:5"
									},
									"src": "582:89:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "677:117:5",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 610,
									"name": "ApprovalForAll",
									"nameLocation": "805:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "836:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "820:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "859:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "843:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "874:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "869:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 607,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "869:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:64:5"
									},
									"src": "799:85:5"
								},
								{
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "890:76:5",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 618,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "980:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "998:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 618,
												"src": "990:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "990:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "989:15:5"
									},
									"returnParameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1036:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 618,
												"src": "1028:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:17:5"
									},
									"scope": 693,
									"src": "971:74:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 619,
										"nodeType": "StructuredDocumentation",
										"src": "1051:131:5",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 626,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1196:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1212:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "1204:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1204:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1203:17:5"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1252:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "1244:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1244:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:15:5"
									},
									"scope": 693,
									"src": "1187:72:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 627,
										"nodeType": "StructuredDocumentation",
										"src": "1265:565:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 638,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1844:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1869:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 638,
												"src": "1861:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1883:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 638,
												"src": "1875:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1875:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1895:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 638,
												"src": "1887:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1919:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 638,
												"src": "1904:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 634,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1904:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1860:64:5"
									},
									"returnParameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1933:0:5"
									},
									"scope": 693,
									"src": "1835:99:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 639,
										"nodeType": "StructuredDocumentation",
										"src": "1940:706:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 648,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2660:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 648,
												"src": "2677:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 640,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2699:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 648,
												"src": "2691:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2691:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2711:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 648,
												"src": "2703:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2676:43:5"
									},
									"returnParameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2728:0:5"
									},
									"scope": 693,
									"src": "2651:78:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 649,
										"nodeType": "StructuredDocumentation",
										"src": "2735:733:5",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 658,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3482:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3503:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "3495:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 650,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3495:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3517:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "3509:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3529:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "3521:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3521:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3494:43:5"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3546:0:5"
									},
									"scope": 693,
									"src": "3473:74:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "3553:452:5",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 666,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4019:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4035:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4027:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4027:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4047:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4039:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4039:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4026:29:5"
									},
									"returnParameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4064:0:5"
									},
									"scope": 693,
									"src": "4010:55:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "4071:315:5",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4400:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4426:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "4418:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4418:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4441:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "4436:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 670,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4436:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4417:33:5"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4459:0:5"
									},
									"scope": 693,
									"src": "4391:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "4466:139:5",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 682,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4619:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4639:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "4631:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4631:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4630:17:5"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4679:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "4671:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4671:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4670:18:5"
									},
									"scope": 693,
									"src": "4610:79:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "4695:138:5",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 692,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4847:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4872:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "4864:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4864:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4887:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "4879:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4879:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4863:33:5"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "4920:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 689,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4920:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4919:6:5"
									},
									"scope": 693,
									"src": "4838:88:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 694,
							"src": "267:4661:5",
							"usedErrors": [],
							"usedEvents": [
								592,
								601,
								610
							]
						}
					],
					"src": "108:4821:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							762
						]
					},
					"id": 763,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 695,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 696,
								"nodeType": "StructuredDocumentation",
								"src": "135:894:6",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 762,
							"linearizedBaseContracts": [
								762
							],
							"name": "ReentrancyGuard",
							"nameLocation": "1048:15:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 699,
									"mutability": "constant",
									"name": "NOT_ENTERED",
									"nameLocation": "1843:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 762,
									"src": "1818:40:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 697,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1818:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 698,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1857:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 702,
									"mutability": "constant",
									"name": "ENTERED",
									"nameLocation": "1889:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 762,
									"src": "1864:36:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 700,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1864:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 701,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1899:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 704,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1923:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 762,
									"src": "1907:23:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 703,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1907:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 705,
										"nodeType": "StructuredDocumentation",
										"src": "1937:52:6",
										"text": " @dev Unauthorized reentrant call."
									},
									"errorSelector": "3ee5aeb5",
									"id": 707,
									"name": "ReentrancyGuardReentrantCall",
									"nameLocation": "2000:28:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:6"
									},
									"src": "1994:37:6"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "2051:38:6",
										"statements": [
											{
												"expression": {
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 710,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "2061:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 711,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "2071:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2061:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "2061:21:6"
											}
										]
									},
									"id": 715,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2048:2:6"
									},
									"returnParameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:0:6"
									},
									"scope": 762,
									"src": "2037:52:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "2490:79:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 718,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "2500:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2500:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 720,
												"nodeType": "ExpressionStatement",
												"src": "2500:21:6"
											},
											{
												"id": 721,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:6"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 722,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 750,
														"src": "2542:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2542:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 724,
												"nodeType": "ExpressionStatement",
												"src": "2542:20:6"
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "2095:366:6",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 726,
									"name": "nonReentrant",
									"nameLocation": "2475:12:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2487:2:6"
									},
									"src": "2466:103:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 741,
										"nodeType": "Block",
										"src": "2614:268:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 729,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "2702:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 730,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "2713:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2702:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 736,
												"nodeType": "IfStatement",
												"src": "2698:86:6",
												"trueBody": {
													"id": 735,
													"nodeType": "Block",
													"src": "2722:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 732,
																	"name": "ReentrancyGuardReentrantCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 707,
																	"src": "2743:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 733,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2743:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 734,
															"nodeType": "RevertStatement",
															"src": "2736:37:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 737,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "2858:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 738,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "2868:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2858:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 740,
												"nodeType": "ExpressionStatement",
												"src": "2858:17:6"
											}
										]
									},
									"id": 742,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2584:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:6"
									},
									"returnParameters": {
										"id": 728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2614:0:6"
									},
									"scope": 762,
									"src": "2575:307:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 749,
										"nodeType": "Block",
										"src": "2926:170:6",
										"statements": [
											{
												"expression": {
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 745,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "3068:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 746,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "3078:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3068:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 748,
												"nodeType": "ExpressionStatement",
												"src": "3068:21:6"
											}
										]
									},
									"id": 750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2897:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2915:2:6"
									},
									"returnParameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2926:0:6"
									},
									"scope": 762,
									"src": "2888:208:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "3339:42:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 756,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "3356:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 757,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "3367:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 755,
												"id": 759,
												"nodeType": "Return",
												"src": "3349:25:6"
											}
										]
									},
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "3102:168:6",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3284:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3307:2:6"
									},
									"returnParameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "3333:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 753,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3333:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:6:6"
									},
									"scope": 762,
									"src": "3275:106:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 763,
							"src": "1030:2353:6",
							"usedErrors": [
								707
							],
							"usedEvents": []
						}
					],
					"src": "109:3275:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							774
						]
					},
					"id": 775,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 764,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 765,
								"nodeType": "StructuredDocumentation",
								"src": "141:280:7",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 774,
							"linearizedBaseContracts": [
								774
							],
							"name": "IERC165",
							"nameLocation": "432:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "446:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 773,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "800:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "825:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "818:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 767,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "818:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:20:7"
									},
									"returnParameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "861:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 770,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:6:7"
									},
									"scope": 774,
									"src": "791:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 775,
							"src": "422:447:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:755:7"
				},
				"id": 7
			},
			"src/Claims.sol": {
				"ast": {
					"absolutePath": "src/Claims.sol",
					"exportedSymbols": {
						"Claims": [
							994
						],
						"IAutonomiNFT": [
							1007
						],
						"IClaims": [
							1027
						],
						"IERC1363": [
							81
						],
						"IERC20": [
							167
						],
						"ReentrancyGuard": [
							762
						],
						"SafeERC20": [
							576
						]
					},
					"id": 995,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 776,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 777,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 168,
							"src": "57:56:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 778,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 577,
							"src": "114:65:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 779,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 763,
							"src": "180:59:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/IClaims.sol",
							"file": "./IClaims.sol",
							"id": 781,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 1028,
							"src": "240:38:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 780,
										"name": "IClaims",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1027,
										"src": "248:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/IAutonomiNFT.sol",
							"file": "./IAutonomiNFT.sol",
							"id": 783,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 1008,
							"src": "279:48:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 782,
										"name": "IAutonomiNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1007,
										"src": "287:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 784,
										"name": "IClaims",
										"nameLocations": [
											"348:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1027,
										"src": "348:7:8"
									},
									"id": 785,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:8"
								},
								{
									"baseName": {
										"id": 786,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"357:15:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 762,
										"src": "357:15:8"
									},
									"id": 787,
									"nodeType": "InheritanceSpecifier",
									"src": "357:15:8"
								}
							],
							"canonicalName": "Claims",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 994,
							"linearizedBaseContracts": [
								994,
								762,
								1027
							],
							"name": "Claims",
							"nameLocation": "338:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 791,
									"libraryName": {
										"id": 788,
										"name": "SafeERC20",
										"nameLocations": [
											"385:9:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 576,
										"src": "385:9:8"
									},
									"nodeType": "UsingForDirective",
									"src": "379:27:8",
									"typeName": {
										"id": 790,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 789,
											"name": "IERC20",
											"nameLocations": [
												"399:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 167,
											"src": "399:6:8"
										},
										"referencedDeclaration": 167,
										"src": "399:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$167",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"errorSelector": "8579befe",
									"id": 793,
									"name": "ZeroAddressNotAllowed",
									"nameLocation": "418:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "439:2:8"
									},
									"src": "412:30:8"
								},
								{
									"errorSelector": "0f43956a",
									"id": 795,
									"name": "ZeroAmountNotAllowed",
									"nameLocation": "453:20:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "473:2:8"
									},
									"src": "447:29:8"
								},
								{
									"constant": true,
									"functionSelector": "ba175dfa",
									"id": 798,
									"mutability": "constant",
									"name": "VESTING_START_TIMESTAMP",
									"nameLocation": "576:23:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "552:60:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 796,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "552:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31373339323832343030",
										"id": 797,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "602:10:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1739282400_by_1",
											"typeString": "int_const 1739282400"
										},
										"value": "1739282400"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "4e301810",
									"id": 801,
									"mutability": "constant",
									"name": "VESTING_PERIOD_1",
									"nameLocation": "643:16:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "619:50:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 799,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "619:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3930",
										"id": 800,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "662:7:8",
										"subdenomination": "days",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_7776000_by_1",
											"typeString": "int_const 7776000"
										},
										"value": "90"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "7f384acf",
									"id": 804,
									"mutability": "constant",
									"name": "VESTING_PERIOD_2",
									"nameLocation": "711:16:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "687:51:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 802,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313830",
										"id": 803,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "730:8:8",
										"subdenomination": "days",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_15552000_by_1",
											"typeString": "int_const 15552000"
										},
										"value": "180"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "170c62dc",
									"id": 808,
									"mutability": "mutable",
									"name": "totalAntClaimedForTokenId",
									"nameLocation": "792:25:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "757:60:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 807,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 805,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "765:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "757:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 806,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "776:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "02db104b",
									"id": 811,
									"mutability": "immutable",
									"name": "ANT_TOKEN",
									"nameLocation": "848:9:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "824:33:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$167",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 810,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 809,
											"name": "IERC20",
											"nameLocations": [
												"824:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 167,
											"src": "824:6:8"
										},
										"referencedDeclaration": 167,
										"src": "824:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$167",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "317e6d23",
									"id": 814,
									"mutability": "immutable",
									"name": "AUTONOMI_NFT",
									"nameLocation": "893:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "863:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
										"typeString": "contract IAutonomiNFT"
									},
									"typeName": {
										"id": 813,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 812,
											"name": "IAutonomiNFT",
											"nameLocations": [
												"863:12:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1007,
											"src": "863:12:8"
										},
										"referencedDeclaration": 1007,
										"src": "863:12:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
											"typeString": "contract IAutonomiNFT"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 855,
										"nodeType": "Block",
										"src": "967:213:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 825,
																	"name": "antToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 817,
																	"src": "989:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "981:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 823,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "981:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "981:17:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1010:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 828,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1002:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 827,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1002:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1002:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "981:31:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 840,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 834,
																	"name": "autonomiNFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "1024:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
																		"typeString": "contract IAutonomiNFT"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
																		"typeString": "contract IAutonomiNFT"
																	}
																],
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1016:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 832,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1016:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1016:20:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1048:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1040:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 836,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1040:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1040:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1016:34:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "981:69:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 846,
												"nodeType": "IfStatement",
												"src": "977:130:8",
												"trueBody": {
													"id": 845,
													"nodeType": "Block",
													"src": "1052:55:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 842,
																	"name": "ZeroAddressNotAllowed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "1073:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 843,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1073:23:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 844,
															"nodeType": "RevertStatement",
															"src": "1066:30:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 847,
														"name": "ANT_TOKEN",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "1117:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$167",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 848,
														"name": "antToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "1129:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$167",
															"typeString": "contract IERC20"
														}
													},
													"src": "1117:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "1117:20:8"
											},
											{
												"expression": {
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 851,
														"name": "AUTONOMI_NFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 814,
														"src": "1147:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
															"typeString": "contract IAutonomiNFT"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 852,
														"name": "autonomiNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 820,
														"src": "1162:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
															"typeString": "contract IAutonomiNFT"
														}
													},
													"src": "1147:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
														"typeString": "contract IAutonomiNFT"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "1147:26:8"
											}
										]
									},
									"id": 856,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "antToken",
												"nameLocation": "931:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "924:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 816,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 815,
														"name": "IERC20",
														"nameLocations": [
															"924:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "924:6:8"
													},
													"referencedDeclaration": 167,
													"src": "924:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "autonomiNFT",
												"nameLocation": "954:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "941:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
													"typeString": "contract IAutonomiNFT"
												},
												"typeName": {
													"id": 819,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 818,
														"name": "IAutonomiNFT",
														"nameLocations": [
															"941:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1007,
														"src": "941:12:8"
													},
													"referencedDeclaration": 1007,
													"src": "941:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
														"typeString": "contract IAutonomiNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:43:8"
									},
									"returnParameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "967:0:8"
									},
									"scope": 994,
									"src": "912:268:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1026
									],
									"body": {
										"id": 919,
										"nodeType": "Block",
										"src": "1771:670:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 868,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 859,
																"src": "1806:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 866,
																"name": "AUTONOMI_NFT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "1785:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
																	"typeString": "contract IAutonomiNFT"
																}
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1798:7:8",
															"memberName": "ownerOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 626,
															"src": "1785:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view external returns (address)"
															}
														},
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1785:29:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 870,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1818:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1822:6:8",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1818:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1785:43:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 877,
												"nodeType": "IfStatement",
												"src": "1781:95:8",
												"trueBody": {
													"id": 876,
													"nodeType": "Block",
													"src": "1830:46:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 873,
																	"name": "Unauthorized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1011,
																	"src": "1851:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1851:14:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 875,
															"nodeType": "RevertStatement",
															"src": "1844:21:8"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 878,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 861,
														"src": "1890:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1900:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1890:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 885,
												"nodeType": "IfStatement",
												"src": "1886:71:8",
												"trueBody": {
													"id": 884,
													"nodeType": "Block",
													"src": "1903:54:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 881,
																	"name": "ZeroAmountNotAllowed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 795,
																	"src": "1924:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 882,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1924:22:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 883,
															"nodeType": "RevertStatement",
															"src": "1917:29:8"
														}
													]
												}
											},
											{
												"assignments": [
													887
												],
												"declarations": [
													{
														"constant": false,
														"id": 887,
														"mutability": "mutable",
														"name": "claimableAmount",
														"nameLocation": "1975:15:8",
														"nodeType": "VariableDeclaration",
														"scope": 919,
														"src": "1967:23:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 886,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1967:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 891,
												"initialValue": {
													"arguments": [
														{
															"id": 889,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "2004:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 888,
														"name": "_claimable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "1993:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1993:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1967:45:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 892,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 861,
														"src": "2106:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 893,
														"name": "claimableAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 887,
														"src": "2115:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2106:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 899,
												"nodeType": "IfStatement",
												"src": "2102:84:8",
												"trueBody": {
													"id": 898,
													"nodeType": "Block",
													"src": "2132:54:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 895,
																	"name": "TryingToClaimTooMuch",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1013,
																	"src": "2153:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 896,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2153:22:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 897,
															"nodeType": "RevertStatement",
															"src": "2146:29:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 900,
															"name": "totalAntClaimedForTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "2260:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 902,
														"indexExpression": {
															"id": 901,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "2286:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2260:34:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 903,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 861,
														"src": "2298:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2260:44:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 905,
												"nodeType": "ExpressionStatement",
												"src": "2260:44:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 909,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2369:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2373:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2369:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 911,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "2381:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 906,
															"name": "ANT_TOKEN",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 811,
															"src": "2346:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														"id": 908,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2356:12:8",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 212,
														"src": "2346:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$167_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2346:42:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 913,
												"nodeType": "ExpressionStatement",
												"src": "2346:42:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 915,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "2418:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 916,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "2427:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 914,
														"name": "TokensClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "2404:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256)"
														}
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:30:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 918,
												"nodeType": "EmitStatement",
												"src": "2399:35:8"
											}
										]
									},
									"documentation": {
										"id": 857,
										"nodeType": "StructuredDocumentation",
										"src": "1186:510:8",
										"text": " @dev The total claimable amount is unlocked during a period of 6 months,\n with the 50% unlocked after 3 months, and the rest after 6 months.\n Autonomi NFT holders can claim any amount less than or equal to the unlocked amount, minus the amount they already claimed.\n The amount claimed should never be more than the total allocation to that NFT.\n NFT holders should be able to claim all their allocated ANT tokens after the 6 month vesting periods have passed."
									},
									"functionSelector": "c3490263",
									"id": 920,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 864,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 863,
												"name": "nonReentrant",
												"nameLocations": [
													"1758:12:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 726,
												"src": "1758:12:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1758:12:8"
										}
									],
									"name": "claim",
									"nameLocation": "1710:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1724:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "1716:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1716:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1741:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "1733:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1715:33:8"
									},
									"returnParameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1771:0:8"
									},
									"scope": 994,
									"src": "1701:740:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 931,
										"nodeType": "Block",
										"src": "2518:43:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 928,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "2546:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 927,
														"name": "_claimable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "2535:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2535:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 926,
												"id": 930,
												"nodeType": "Return",
												"src": "2528:26:8"
											}
										]
									},
									"functionSelector": "9c7e4a66",
									"id": 932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimable",
									"nameLocation": "2456:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2477:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "2469:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:17:8"
									},
									"returnParameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "2509:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2509:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2508:9:8"
									},
									"scope": 994,
									"src": "2447:114:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "2635:554:8",
										"statements": [
											{
												"assignments": [
													940
												],
												"declarations": [
													{
														"constant": false,
														"id": 940,
														"mutability": "mutable",
														"name": "totalAllocation",
														"nameLocation": "2653:15:8",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "2645:23:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 939,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2645:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 945,
												"initialValue": {
													"arguments": [
														{
															"id": 943,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 934,
															"src": "2707:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 941,
															"name": "AUTONOMI_NFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "2671:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IAutonomiNFT_$1007",
																"typeString": "contract IAutonomiNFT"
															}
														},
														"id": 942,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2684:22:8",
														"memberName": "tokenIdToAntAllocation",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1006,
														"src": "2671:35:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view external returns (uint256)"
														}
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2671:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2645:70:8"
											},
											{
												"assignments": [
													947
												],
												"declarations": [
													{
														"constant": false,
														"id": 947,
														"mutability": "mutable",
														"name": "alreadyClaimed",
														"nameLocation": "2734:14:8",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "2726:22:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 946,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2726:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 951,
												"initialValue": {
													"baseExpression": {
														"id": 948,
														"name": "totalAntClaimedForTokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "2751:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 950,
													"indexExpression": {
														"id": 949,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 934,
														"src": "2777:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2751:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2726:59:8"
											},
											{
												"assignments": [
													953
												],
												"declarations": [
													{
														"constant": false,
														"id": 953,
														"mutability": "mutable",
														"name": "elapsedTime",
														"nameLocation": "2804:11:8",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "2796:19:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 952,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2796:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 958,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 954,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2818:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 955,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2824:9:8",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2818:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 956,
														"name": "VESTING_START_TIMESTAMP",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "2836:23:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2818:41:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2796:63:8"
											},
											{
												"assignments": [
													960
												],
												"declarations": [
													{
														"constant": false,
														"id": 960,
														"mutability": "mutable",
														"name": "claimableAmount",
														"nameLocation": "2877:15:8",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "2869:23:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 959,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2869:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 962,
												"initialValue": {
													"hexValue": "30",
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2895:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2869:27:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 963,
														"name": "elapsedTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 953,
														"src": "2911:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 964,
														"name": "VESTING_PERIOD_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 804,
														"src": "2926:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2911:31:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 973,
															"name": "elapsedTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 953,
															"src": "3029:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 974,
															"name": "VESTING_PERIOD_1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 801,
															"src": "3044:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3029:31:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 988,
													"nodeType": "IfStatement",
													"src": "3025:125:8",
													"trueBody": {
														"id": 987,
														"nodeType": "Block",
														"src": "3062:88:8",
														"statements": [
															{
																"expression": {
																	"id": 985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 976,
																		"name": "claimableAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 960,
																		"src": "3076:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 984,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 979,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 977,
																							"name": "totalAllocation",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 940,
																							"src": "3095:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3530",
																							"id": 978,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3113:2:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_50_by_1",
																								"typeString": "int_const 50"
																							},
																							"value": "50"
																						},
																						"src": "3095:20:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 980,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3094:22:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "313030",
																				"id": 981,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3119:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			},
																			"src": "3094:28:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 983,
																			"name": "alreadyClaimed",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 947,
																			"src": "3125:14:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3094:45:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3076:63:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 986,
																"nodeType": "ExpressionStatement",
																"src": "3076:63:8"
															}
														]
													}
												},
												"id": 989,
												"nodeType": "IfStatement",
												"src": "2907:243:8",
												"trueBody": {
													"id": 972,
													"nodeType": "Block",
													"src": "2944:75:8",
													"statements": [
														{
															"expression": {
																"id": 970,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 966,
																	"name": "claimableAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 960,
																	"src": "2958:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 967,
																		"name": "totalAllocation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 940,
																		"src": "2976:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 968,
																		"name": "alreadyClaimed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 947,
																		"src": "2994:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2976:32:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2958:50:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 971,
															"nodeType": "ExpressionStatement",
															"src": "2958:50:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 990,
													"name": "claimableAmount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 960,
													"src": "3167:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 938,
												"id": 991,
												"nodeType": "Return",
												"src": "3160:22:8"
											}
										]
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_claimable",
									"nameLocation": "2576:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2595:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "2587:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 933,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2587:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2586:17:8"
									},
									"returnParameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "2626:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2626:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2625:9:8"
									},
									"scope": 994,
									"src": "2567:622:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 995,
							"src": "329:2862:8",
							"usedErrors": [
								179,
								707,
								793,
								795,
								1011,
								1013
							],
							"usedEvents": [
								1019
							]
						}
					],
					"src": "32:3160:8"
				},
				"id": 8
			},
			"src/IAutonomiNFT.sol": {
				"ast": {
					"absolutePath": "src/IAutonomiNFT.sol",
					"exportedSymbols": {
						"IAutonomiNFT": [
							1007
						],
						"IERC165": [
							774
						],
						"IERC721": [
							693
						]
					},
					"id": 1008,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 996,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:9"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 997,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1008,
							"sourceUnit": 694,
							"src": "57:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 998,
										"name": "IERC721",
										"nameLocations": [
											"143:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 693,
										"src": "143:7:9"
									},
									"id": 999,
									"nodeType": "InheritanceSpecifier",
									"src": "143:7:9"
								}
							],
							"canonicalName": "IAutonomiNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1007,
							"linearizedBaseContracts": [
								1007,
								693,
								774
							],
							"name": "IAutonomiNFT",
							"nameLocation": "127:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "fd70d177",
									"id": 1006,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenIdToAntAllocation",
									"nameLocation": "166:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "197:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "189:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1000,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "189:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "188:17:9"
									},
									"returnParameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "229:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "229:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "228:9:9"
									},
									"scope": 1007,
									"src": "157:81:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1008,
							"src": "117:123:9",
							"usedErrors": [],
							"usedEvents": [
								592,
								601,
								610
							]
						}
					],
					"src": "32:209:9"
				},
				"id": 9
			},
			"src/IClaims.sol": {
				"ast": {
					"absolutePath": "src/IClaims.sol",
					"exportedSymbols": {
						"IClaims": [
							1027
						]
					},
					"id": 1028,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1009,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaims",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1027,
							"linearizedBaseContracts": [
								1027
							],
							"name": "IClaims",
							"nameLocation": "480:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "82b42900",
									"id": 1011,
									"name": "Unauthorized",
									"nameLocation": "500:12:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:2:10"
									},
									"src": "494:21:10"
								},
								{
									"errorSelector": "d89f341b",
									"id": 1013,
									"name": "TryingToClaimTooMuch",
									"nameLocation": "526:20:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:10"
									},
									"src": "520:29:10"
								},
								{
									"anonymous": false,
									"eventSelector": "bde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a",
									"id": 1019,
									"name": "TokensClaimed",
									"nameLocation": "561:13:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "591:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "575:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "575:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1017,
												"indexed": true,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "616:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "600:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "600:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "574:49:10"
									},
									"src": "555:69:10"
								},
								{
									"functionSelector": "c3490263",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nameLocation": "639:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "653:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "645:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "670:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "662:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "662:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:33:10"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "686:0:10"
									},
									"scope": 1027,
									"src": "630:57:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1028,
							"src": "470:219:10",
							"usedErrors": [
								1011,
								1013
							],
							"usedEvents": [
								1019
							]
						}
					],
					"src": "32:658:10"
				},
				"id": 10
			}
		}
	}
}